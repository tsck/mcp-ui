{"version":3,"file":"index.js","sources":["../../src/IconButton/IconButton.types.ts","../../src/IconButton/IconButton.styles.tsx","../../src/IconButton/IconButton.tsx"],"sourcesContent":["import React from 'react';\n\nimport { Either } from '@leafygreen-ui/lib';\nimport {\n  InferredPolymorphicProps,\n  PolymorphicAs,\n} from '@leafygreen-ui/polymorphic';\n\nexport const Size = {\n  Default: 'default',\n  Large: 'large',\n  XLarge: 'xlarge',\n} as const;\n\nexport type Size = (typeof Size)[keyof typeof Size];\n\n// Since applications can't yet tree-shake, we're duplicating this interface from the types in the namespaces within the Icon package rather than importing the Icon package.\n// TODO: Import {IconProps} from '.../icon`\nexport interface IconProps extends React.SVGProps<SVGSVGElement> {\n  glyph: string;\n  size?: Size | number;\n  title?: string | null | boolean;\n}\n\nexport interface BaseIconButtonProps {\n  className?: string;\n\n  /**\n   * The Leafygreen `<Icon />` component to render\n   */\n  children?: React.ReactNode;\n\n  /**\n   * If `true`, the button will be rendered with disabled styles\n   */\n  disabled?: boolean;\n\n  /**\n   * Size of the icon\n   */\n  size?: Size;\n\n  darkMode?: boolean;\n\n  /**\n   * If `true`, the button will be rendered with active styles\n   */\n  active?: boolean;\n\n  /**\n   * The aria-label attribute defines a string value that labels an interactive element.\n   *\n   * [Mozilla Docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-label)\n   */\n  'aria-label'?: string;\n\n  /**\n   * The aria-labelledby attribute identifies the element (or elements) that labels the element it is applied to.\n   *\n   * [Mozilla Docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby)\n   */\n  'aria-labelledby'?: string;\n\n  /**\n   * Callback fired on click\n   */\n  onClick?: React.MouseEventHandler<HTMLButtonElement | HTMLAnchorElement>;\n\n  /**\n   * Sets the tabIndex for IconButton component.\n   */\n  tabIndex?: React.ComponentProps<'button'>['tabIndex'];\n}\n\ntype AriaLabels = 'aria-label' | 'aria-labelledby';\n\nexport type AccessibleIconButtonProps = Either<BaseIconButtonProps, AriaLabels>;\n\n// External only\nexport type IconButtonProps<TAsProp extends PolymorphicAs = 'button'> =\n  InferredPolymorphicProps<TAsProp, AccessibleIconButtonProps>;\n","import { transparentize } from 'polished';\n\nimport { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { focusRing, transitionDuration } from '@leafygreen-ui/tokens';\n\nimport { Size } from './IconButton.types';\n\nexport const removeButtonStyle = css`\n  border: none;\n  -webkit-appearance: unset;\n  padding: unset;\n`;\n\nexport const baseIconButtonStyle = css`\n  display: inline-block;\n  border-radius: 100px;\n  position: relative;\n  cursor: pointer;\n  flex-shrink: 0;\n  transition: ${transitionDuration.default}ms ease-in-out;\n  transition-property: color, box-shadow;\n\n  // Set background to fully-transparent white for cross-browser compatability with Safari\n  //\n  // Safari treats \"transparent\" values in CSS as transparent black instead of white\n  // which can make things render differently across browsers if not defined explicitly.\n  background-color: rgba(255, 255, 255, 0);\n\n  &::before {\n    content: '';\n    transition: ${transitionDuration.default}ms all ease-in-out;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    border-radius: 100%;\n    transform: scale(0.8);\n  }\n\n  &:active:before,\n  &:hover:before,\n  &:focus:before,\n  &[data-hover='true']:before,\n  &[data-focus='true']:before {\n    transform: scale(1);\n  }\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nexport const iconButtonSizes = {\n  [Size.Default]: css`\n    height: 28px;\n    width: 28px;\n  `,\n  [Size.Large]: css`\n    height: 36px;\n    width: 36px;\n  `,\n  [Size.XLarge]: css`\n    height: 42px;\n    width: 42px;\n  `,\n} as const;\n\nexport const iconButtonMode: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.gray.dark1};\n\n    &:active,\n    &:hover,\n    &[data-hover='true'] {\n      color: ${palette.black};\n\n      &::before {\n        background-color: ${transparentize(0.9, palette.gray.dark2)};\n      }\n    }\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.gray.light1};\n\n    &:active,\n    &:hover,\n    &[data-hover='true'] {\n      color: ${palette.gray.light3};\n\n      &::before {\n        background-color: ${transparentize(0.9, palette.gray.light2)};\n      }\n    }\n  `,\n};\n\nexport const focusStyle: Record<Theme, string> = {\n  [Theme.Light]: css`\n    &:focus-visible,\n    &[data-focus='true'] {\n      color: ${palette.black};\n      box-shadow: ${focusRing[Theme.Light].default};\n\n      &::before {\n        background-color: ${transparentize(0.9, palette.gray.dark2)};\n      }\n    }\n  `,\n  [Theme.Dark]: css`\n    &:focus-visible,\n    &[data-focus='true'] {\n      color: ${palette.gray.light3};\n      box-shadow: ${focusRing[Theme.Dark].default};\n\n      &::before {\n        background-color: ${transparentize(0.9, palette.gray.light2)};\n      }\n    }\n  `,\n} as const;\n\nexport const disabledStyle: Record<Theme, string> = {\n  [Theme.Light]: css`\n    cursor: not-allowed;\n    color: ${palette.gray.light1};\n    background-color: rgba(255, 255, 255, 0);\n\n    &:active,\n    &:hover,\n    &[data-hover='true'] {\n      color: ${palette.gray.light1};\n\n      &::before {\n        background-color: rgba(255, 255, 255, 0);\n      }\n    }\n\n    &:focus,\n    &[data-focus='true'] {\n      color: ${palette.gray.light1};\n\n      &::before {\n        background-color: rgba(255, 255, 255, 0);\n      }\n    }\n  `,\n\n  [Theme.Dark]: css`\n    cursor: not-allowed;\n    color: ${palette.gray.dark1};\n    background-color: rgba(255, 255, 255, 0);\n\n    &:active,\n    &:hover,\n    &[data-hover='true'] {\n      color: ${palette.gray.dark1};\n\n      &::before {\n        background-color: rgba(255, 255, 255, 0);\n      }\n    }\n\n    &:focus,\n    &[data-focus='true'] {\n      color: ${palette.gray.dark1};\n\n      &::before {\n        background-color: rgba(255, 255, 255, 0);\n      }\n    }\n  `,\n} as const;\n\nexport const activeStyle: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.black};\n\n    &::before {\n      background-color: ${transparentize(0.9, palette.gray.dark2)};\n      transform: scale(1);\n    }\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.gray.light3};\n\n    &::before {\n      background-color: ${transparentize(0.9, palette.gray.light2)};\n      transform: scale(1);\n    }\n  `,\n} as const;\n\nexport const iconStyle = css`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n","import React from 'react';\n\nimport { validateAriaLabelProps } from '@leafygreen-ui/a11y';\nimport { cx } from '@leafygreen-ui/emotion';\nimport { isComponentGlyph } from '@leafygreen-ui/icon';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport { isComponentType } from '@leafygreen-ui/lib';\nimport {\n  InferredPolymorphic,\n  useInferredPolymorphic,\n} from '@leafygreen-ui/polymorphic';\n\nimport {\n  activeStyle,\n  baseIconButtonStyle,\n  disabledStyle,\n  focusStyle,\n  iconButtonMode,\n  iconButtonSizes,\n  iconStyle,\n  removeButtonStyle,\n} from './IconButton.styles';\nimport { AccessibleIconButtonProps, IconProps, Size } from './IconButton.types';\n\n/**\n * Icon Buttons are a type of call to action (CTA) the user can click or press. They use icons to indicate the type of action that will occur when the button is pressed.\n */\nexport const IconButton = InferredPolymorphic<\n  AccessibleIconButtonProps,\n  'button'\n>(\n  (\n    {\n      as,\n      size = Size.Default,\n      darkMode: darkModeProp,\n      disabled = false,\n      active = false,\n      tabIndex = 0,\n      className,\n      children,\n      ...restProps\n    },\n    ref,\n  ) => {\n    const { Component, rest } = useInferredPolymorphic(as, restProps, 'button');\n\n    const { theme } = useDarkMode(darkModeProp);\n\n    // We do our own proptype validation here to ensure either 'aria-label' or 'aria-labelledby' are passed to the component.\n    validateAriaLabelProps(rest, 'IconButton');\n\n    const processedChildren = React.Children.map(children, child => {\n      if (!child) {\n        return null;\n      }\n\n      // Check to see if child is a LeafyGreen Icon or a LeafyGreen Glyph\n      // If so, we unset the title and rely on the aria-label prop to give\n      // information about the rendered content.\n      if (isComponentType(child, 'Icon') || isComponentGlyph(child)) {\n        const { size: childSize, title }: IconProps = child.props;\n\n        const newChildProps: Partial<IconProps> = {\n          size: childSize || size,\n        };\n\n        if (typeof title !== 'string' || title.length === 0) {\n          // Unsets the title within an icon since the button itself will have\n          // aria-label or aria-labelledby set.\n          newChildProps.title = false;\n        }\n\n        return React.cloneElement(child, newChildProps);\n      }\n\n      return child;\n    });\n\n    const iconButtonProps = {\n      ...rest,\n      ref,\n      tabIndex,\n      // We don't set the `disabled` prop since we want the button to be focusable\n      ['aria-disabled']: disabled,\n      // Override any actions if it's disabled\n      href: disabled ? undefined : rest.href,\n      onClick: disabled ? undefined : rest.onClick,\n      className: cx(\n        removeButtonStyle,\n        baseIconButtonStyle,\n        iconButtonSizes[size],\n        iconButtonMode[theme],\n        focusStyle[theme],\n        {\n          [activeStyle[theme]]: active && !disabled,\n          [disabledStyle[theme]]: disabled,\n        },\n        className,\n      ),\n    };\n\n    return (\n      <Component {...iconButtonProps}>\n        <div className={iconStyle}>{processedChildren}</div>\n      </Component>\n    );\n  },\n);\n\nIconButton.displayName = 'IconButton';\n"],"names":["_templateObject","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","_templateObject9","_templateObject0","_templateObject1","_templateObject10","_templateObject11","_templateObject12","Size","Default","Large","XLarge","removeButtonStyle","css","_taggedTemplateLiteral","baseIconButtonStyle","transitionDuration","default","iconButtonSizes","_defineProperty","iconButtonMode","Theme","Light","palette","gray","dark1","black","transparentize","dark2","Dark","light1","light3","light2","focusStyle","focusRing","disabledStyle","activeStyle","iconStyle","_excluded","IconButton","InferredPolymorphic","_ref","ref","as","_ref$size","size","darkModeProp","darkMode","_ref$disabled","disabled","_ref$active","active","_ref$tabIndex","tabIndex","className","children","restProps","_objectWithoutProperties","_useInferredPolymorph","useInferredPolymorphic","Component","rest","theme","useDarkMode","validateAriaLabelProps","processedChildren","React","Children","map","child","isComponentType","isComponentGlyph","_child$props","props","childSize","title","newChildProps","length","cloneElement","iconButtonProps","_objectSpread","undefined","href","onClick","cx","createElement","displayName"],"mappings":"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"}