[
  {
    "tags": {},
    "description": "Returns default chart options that are shared by all charts.",
    "methods": [],
    "displayName": "getDefaultChartOptions",
    "props": {
      "String": "",
      "RelativeIndexable": {
        "at": {
          "name": "at",
          "defaultValue": null,
          "description": "",
          "required": true,
          "type": {
            "name": "(index: number) => string"
          },
          "tags": {}
        }
      }
    }
  },
  {
    "tags": {},
    "description": "",
    "methods": [],
    "displayName": "useChart",
    "props": {
      "ChartHookProps": {
        "chartId": {
          "name": "chartId",
          "defaultValue": null,
          "description": "The id of the chart.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "enableGroupTooltipSync": {
          "name": "enableGroupTooltipSync",
          "defaultValue": null,
          "description": "Enables tooltip synchronization across charts with the same `groupId`.\n`groupId` must be set for this to work.",
          "required": true,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        },
        "groupId": {
          "name": "groupId",
          "defaultValue": null,
          "description": "Charts with the same `groupId` will have their tooltips synced across charts.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "onChartReady": {
          "name": "onChartReady",
          "defaultValue": {
            "value": "() => {}"
          },
          "description": "Callback to be called when chart is finished rendering.",
          "required": false,
          "type": {
            "name": "() => void"
          },
          "tags": {}
        },
        "onZoomSelect": {
          "name": "onZoomSelect",
          "defaultValue": null,
          "description": "Callback to be called when a zoom selection is made.",
          "required": false,
          "type": {
            "name": "(e: EChartZoomSelectionEvent) => void"
          },
          "tags": {}
        },
        "state": {
          "name": "state",
          "defaultValue": null,
          "description": "Controls the current chart state.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ChartStates",
            "value": [
              {
                "value": "\"unset\""
              },
              {
                "value": "\"loading\""
              },
              {
                "value": "\"dragging\""
              },
              {
                "value": "\"overlay\""
              }
            ]
          },
          "tags": {}
        },
        "theme": {
          "name": "theme",
          "defaultValue": null,
          "description": "",
          "required": true,
          "type": {
            "name": "enum",
            "raw": "Theme",
            "value": [
              {
                "value": "\"light\""
              },
              {
                "value": "\"dark\""
              }
            ]
          },
          "tags": {}
        },
        "zoomSelect": {
          "name": "zoomSelect",
          "defaultValue": null,
          "description": "Zoom selection enablement configuration.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ZoomSelect",
            "value": [
              {
                "value": "{ xAxis: boolean; yAxis?: boolean; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "{ xAxis?: boolean; yAxis: boolean; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        }
      }
    }
  },
  {
    "tags": {},
    "description": "",
    "methods": [],
    "displayName": "Chart",
    "props": {
      "HTMLAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "AriaAttributes": "https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes",
      "DOMAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "DarkModeProps": {
        "darkMode": {
          "name": "darkMode",
          "defaultValue": {
            "value": "false"
          },
          "description": "Renders the component with dark mode styles.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {
            "default": "false"
          }
        }
      },
      "ChartProps": {
        "dragId": {
          "name": "dragId",
          "defaultValue": {
            "value": ""
          },
          "description": "Unique identifier when using with `DragProvider`.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | number",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              }
            ]
          },
          "tags": {}
        },
        "enableGroupTooltipSync": {
          "name": "enableGroupTooltipSync",
          "defaultValue": {
            "value": true
          },
          "description": "Enables tooltip synchronization across charts with the same groupId.\ngroupId must be set for this to work.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {
            "default": "true"
          }
        },
        "groupId": {
          "name": "groupId",
          "defaultValue": null,
          "description": "Charts with same groupID will have their tooltips synchronized.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "onChartReady": {
          "name": "onChartReady",
          "defaultValue": null,
          "description": "Callback to be called when chart is finished rendering.",
          "required": false,
          "type": {
            "name": "() => void"
          },
          "tags": {}
        },
        "onZoomSelect": {
          "name": "onZoomSelect",
          "defaultValue": null,
          "description": "Zoom selection enablement configuration.",
          "required": false,
          "type": {
            "name": "(e: EChartZoomSelectionEvent) => void"
          },
          "tags": {}
        },
        "state": {
          "name": "state",
          "defaultValue": {
            "value": "unset"
          },
          "description": "Controls the current chart state.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ChartStates",
            "value": [
              {
                "value": "\"unset\""
              },
              {
                "value": "\"loading\""
              },
              {
                "value": "\"dragging\""
              },
              {
                "value": "\"overlay\""
              }
            ]
          },
          "tags": {}
        },
        "zoomSelect": {
          "name": "zoomSelect",
          "defaultValue": null,
          "description": "Zoom selection configuration.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ZoomSelect",
            "value": [
              {
                "value": "{ xAxis: boolean; yAxis?: boolean; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "{ xAxis?: boolean; yAxis: boolean; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        }
      }
    }
  },
  {
    "tags": {},
    "description": "",
    "methods": [],
    "displayName": "ChartProvider",
    "props": {
      "ChartContextType": {
        "chart": {
          "name": "chart",
          "defaultValue": null,
          "description": "",
          "required": true,
          "type": {
            "name": "ChartInstance"
          },
          "tags": {}
        }
      },
      "ChartProviderProps": {
        "children": {
          "name": "children",
          "defaultValue": null,
          "description": "",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "Iterable<ReactNode>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        }
      }
    }
  },
  {
    "tags": {},
    "description": "",
    "methods": [],
    "displayName": "ChartGrid",
    "props": {
      "ChartGridProps": {
        "vertical": {
          "name": "vertical",
          "defaultValue": {
            "value": true
          },
          "description": "",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        },
        "horizontal": {
          "name": "horizontal",
          "defaultValue": {
            "value": true
          },
          "description": "",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        }
      }
    }
  },
  {
    "tags": {},
    "description": "",
    "methods": [],
    "displayName": "ChartHeader",
    "props": {
      "ChartHeaderProps": {
        "title": {
          "name": "title",
          "defaultValue": null,
          "description": "The title of the chart",
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "Iterable<ReactNode>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        },
        "titleIcon": {
          "name": "titleIcon",
          "defaultValue": null,
          "description": "Icon to be rendered directly to the right of the title.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "Iterable<ReactNode>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        },
        "showDivider": {
          "name": "showDivider",
          "defaultValue": null,
          "description": "Whether to display divider line on top of header.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        },
        "headerContent": {
          "name": "headerContent",
          "defaultValue": null,
          "description": "Content to be rendered to the right of the label.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "Iterable<ReactNode>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        }
      },
      "HTMLAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "AriaAttributes": "https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes",
      "DOMAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes"
    }
  },
  {
    "tags": {},
    "description": "",
    "methods": [],
    "displayName": "SeriesList",
    "props": {
      "SeriesListProps": {
        "seriesData": {
          "name": "seriesData",
          "defaultValue": null,
          "description": "",
          "required": true,
          "type": {
            "name": "CallbackSeriesDataPoint[]"
          },
          "tags": {}
        },
        "seriesValueFormatter": {
          "name": "seriesValueFormatter",
          "defaultValue": null,
          "description": "",
          "required": false,
          "type": {
            "name": "(value: OptionDataValue) => ReactNode"
          },
          "tags": {}
        },
        "seriesNameFormatter": {
          "name": "seriesNameFormatter",
          "defaultValue": null,
          "description": "",
          "required": false,
          "type": {
            "name": "(name: string) => ReactNode"
          },
          "tags": {}
        },
        "sort": {
          "name": "sort",
          "defaultValue": null,
          "description": "",
          "required": true,
          "type": {
            "name": "(seriesA: SeriesInfo, seriesB: SeriesInfo) => number"
          },
          "tags": {}
        },
        "theme": {
          "name": "theme",
          "defaultValue": null,
          "description": "",
          "required": true,
          "type": {
            "name": "enum",
            "raw": "Theme",
            "value": [
              {
                "value": "\"light\""
              },
              {
                "value": "\"dark\""
              }
            ]
          },
          "tags": {}
        },
        "tooltipPinned": {
          "name": "tooltipPinned",
          "defaultValue": null,
          "description": "",
          "required": true,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        }
      }
    }
  },
  {
    "tags": {},
    "description": "",
    "methods": [],
    "displayName": "SeriesListItem",
    "props": {
      "SeriesListItemProps": {
        "seriesName": {
          "name": "seriesName",
          "defaultValue": null,
          "description": "",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "data": {
          "name": "data",
          "defaultValue": null,
          "description": "",
          "required": true,
          "type": {
            "name": "OptionDataValue[]"
          },
          "tags": {}
        },
        "color": {
          "name": "color",
          "defaultValue": null,
          "description": "",
          "required": true,
          "type": {
            "name": "string"
          },
          "tags": {}
        }
      },
      "SeriesListProps": {
        "seriesValueFormatter": {
          "name": "seriesValueFormatter",
          "defaultValue": null,
          "description": "",
          "required": false,
          "type": {
            "name": "(value: OptionDataValue) => ReactNode"
          },
          "tags": {}
        },
        "seriesNameFormatter": {
          "name": "seriesNameFormatter",
          "defaultValue": null,
          "description": "",
          "required": false,
          "type": {
            "name": "(name: string) => ReactNode"
          },
          "tags": {}
        }
      }
    }
  },
  {
    "tags": {},
    "description": "",
    "methods": [],
    "displayName": "SeriesListItemColorDot",
    "props": {
      "SeriesListItemColorDotProps": {
        "color": {
          "name": "color",
          "defaultValue": null,
          "description": "",
          "required": true,
          "type": {
            "name": "string"
          },
          "tags": {}
        }
      }
    }
  },
  {
    "tags": {},
    "description": "",
    "methods": [],
    "displayName": "CustomTooltip",
    "props": {
      "CustomTooltipProps": {
        "chartId": {
          "name": "chartId",
          "defaultValue": null,
          "description": "",
          "required": true,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "headerFormatter": {
          "name": "headerFormatter",
          "defaultValue": null,
          "description": "",
          "required": false,
          "type": {
            "name": "(value: string | number) => ReactNode"
          },
          "tags": {}
        },
        "seriesData": {
          "name": "seriesData",
          "defaultValue": null,
          "description": "",
          "required": true,
          "type": {
            "name": "CallbackSeriesDataPoint[]"
          },
          "tags": {}
        },
        "seriesNameFormatter": {
          "name": "seriesNameFormatter",
          "defaultValue": null,
          "description": "",
          "required": false,
          "type": {
            "name": "(name: string) => ReactNode"
          },
          "tags": {}
        },
        "seriesValueFormatter": {
          "name": "seriesValueFormatter",
          "defaultValue": null,
          "description": "",
          "required": false,
          "type": {
            "name": "(value: OptionDataValue) => ReactNode"
          },
          "tags": {}
        },
        "sort": {
          "name": "sort",
          "defaultValue": null,
          "description": "",
          "required": false,
          "type": {
            "name": "(seriesA: SeriesInfo, seriesB: SeriesInfo) => number"
          },
          "tags": {}
        },
        "tooltipPinned": {
          "name": "tooltipPinned",
          "defaultValue": null,
          "description": "",
          "required": true,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        }
      },
      "DarkModeProps": {
        "darkMode": {
          "name": "darkMode",
          "defaultValue": {
            "value": "false"
          },
          "description": "Renders the component with dark mode styles.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {
            "default": "false"
          }
        }
      }
    }
  },
  {
    "tags": {},
    "description": "",
    "methods": [],
    "displayName": "ChartTooltip",
    "props": {
      "ChartTooltipProps": {
        "sort": {
          "name": "sort",
          "defaultValue": null,
          "description": "",
          "required": false,
          "type": {
            "name": "(seriesA: SeriesInfo, seriesB: SeriesInfo) => number"
          },
          "tags": {}
        },
        "seriesValueFormatter": {
          "name": "seriesValueFormatter",
          "defaultValue": null,
          "description": "",
          "required": false,
          "type": {
            "name": "(value: OptionDataValue) => ReactNode"
          },
          "tags": {}
        },
        "seriesNameFormatter": {
          "name": "seriesNameFormatter",
          "defaultValue": null,
          "description": "",
          "required": false,
          "type": {
            "name": "(name: string) => ReactNode"
          },
          "tags": {}
        },
        "headerFormatter": {
          "name": "headerFormatter",
          "defaultValue": null,
          "description": "",
          "required": false,
          "type": {
            "name": "(value: string | number) => ReactNode"
          },
          "tags": {}
        }
      }
    }
  },
  {
    "tags": {},
    "description": "Wrapper around the ECharts library. Instantiates an ECharts instance.\nProvides helper methods to hide ECharts specific logic and give a cleaner API\nfor interacting with a chart.",
    "methods": [],
    "displayName": "useEchart",
    "props": {
      "EChartHookProps": {
        "container": {
          "name": "container",
          "defaultValue": null,
          "description": "",
          "required": true,
          "type": {
            "name": "HTMLDivElement"
          },
          "tags": {}
        },
        "initialOptions": {
          "name": "initialOptions",
          "defaultValue": null,
          "description": "",
          "required": false,
          "type": {
            "name": "Partial<EChartOptions>"
          },
          "tags": {}
        },
        "shouldEnableZoom": {
          "name": "shouldEnableZoom",
          "defaultValue": {
            "value": false
          },
          "description": "",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        },
        "theme": {
          "name": "theme",
          "defaultValue": null,
          "description": "",
          "required": true,
          "type": {
            "name": "enum",
            "raw": "Theme",
            "value": [
              {
                "value": "\"light\""
              },
              {
                "value": "\"dark\""
              }
            ]
          },
          "tags": {}
        }
      }
    }
  },
  {
    "tags": {},
    "description": "",
    "methods": [],
    "displayName": "BaseEventMarker",
    "props": {
      "BaseEventMarkerLineProps": {
        "type": {
          "name": "type",
          "defaultValue": null,
          "description": "",
          "required": true,
          "type": {
            "name": "enum",
            "raw": "\"line\" | \"point\"",
            "value": [
              {
                "value": "\"line\""
              },
              {
                "value": "\"point\""
              }
            ]
          },
          "tags": {}
        },
        "position": {
          "name": "position",
          "defaultValue": null,
          "description": "",
          "required": true,
          "type": {
            "name": "enum",
            "raw": "string | number | [string | number, string | number]",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "[string | number, string | number]"
              }
            ]
          },
          "tags": {}
        }
      },
      "BaseEventMarkerProps": {
        "label": {
          "name": "label",
          "defaultValue": null,
          "description": "",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "message": {
          "name": "message",
          "defaultValue": null,
          "description": "",
          "required": true,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "level": {
          "name": "level",
          "defaultValue": {
            "value": "warning"
          },
          "description": "",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "EventLevel",
            "value": [
              {
                "value": "\"warning\""
              },
              {
                "value": "\"info\""
              }
            ]
          },
          "tags": {}
        }
      }
    }
  },
  {
    "tags": {},
    "description": "",
    "methods": [],
    "displayName": "EventMarkerLine",
    "props": {
      "BaseEventMarkerProps": {
        "label": {
          "name": "label",
          "defaultValue": null,
          "description": "",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "message": {
          "name": "message",
          "defaultValue": null,
          "description": "",
          "required": true,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "level": {
          "name": "level",
          "defaultValue": {
            "value": "warning"
          },
          "description": "",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "EventLevel",
            "value": [
              {
                "value": "\"warning\""
              },
              {
                "value": "\"info\""
              }
            ]
          },
          "tags": {}
        }
      },
      "BaseEventMarkerLineProps": {
        "position": {
          "name": "position",
          "defaultValue": null,
          "description": "",
          "required": true,
          "type": {
            "name": "enum",
            "raw": "string | number",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              }
            ]
          },
          "tags": {}
        }
      }
    }
  },
  {
    "tags": {},
    "description": "",
    "methods": [],
    "displayName": "EventMarkerPoint",
    "props": {
      "BaseEventMarkerProps": {
        "label": {
          "name": "label",
          "defaultValue": null,
          "description": "",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "message": {
          "name": "message",
          "defaultValue": null,
          "description": "",
          "required": true,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "level": {
          "name": "level",
          "defaultValue": {
            "value": "warning"
          },
          "description": "",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "EventLevel",
            "value": [
              {
                "value": "\"warning\""
              },
              {
                "value": "\"info\""
              }
            ]
          },
          "tags": {}
        }
      },
      "BaseEventMarkerPointProps": {
        "position": {
          "name": "position",
          "defaultValue": null,
          "description": "",
          "required": true,
          "type": {
            "name": "[string | number, string | number]"
          },
          "tags": {}
        }
      }
    }
  },
  {
    "tags": {},
    "description": "",
    "methods": [],
    "displayName": "Line",
    "props": {
      "LineProps": {
        "name": {
          "name": "name",
          "defaultValue": null,
          "description": "Series name used for displaying in tooltip and filtering with the legend.",
          "required": true,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "data": {
          "name": "data",
          "defaultValue": null,
          "description": "Data array of the series. Data is represented by a two-dimensional array where\neach element is a data point. In a data point array, the first element is the\nx-axis value and the second element is the y-axis value.\n\n```\nseries: [{\n  data: [\n    //  X      Y\n    [  3.4,   4.5 ],\n    [  4.2,   2.3 ],\n    [  10.8,  9.5 ],\n    [  7.2,   8.8 ]\n  ]\n}]\n```",
          "required": true,
          "type": {
            "name": "[XValue, YValue][]"
          },
          "tags": {}
        }
      }
    }
  },
  {
    "tags": {},
    "description": "",
    "methods": [],
    "displayName": "ThresholdLine",
    "props": {
      "ThresholdLineProps": {
        "position": {
          "name": "position",
          "defaultValue": null,
          "description": "",
          "required": true,
          "type": {
            "name": "number"
          },
          "tags": {}
        },
        "value": {
          "name": "value",
          "defaultValue": null,
          "description": "",
          "required": true,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "label": {
          "name": "label",
          "defaultValue": null,
          "description": "",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        }
      }
    }
  },
  {
    "tags": {},
    "description": "React component that can render an x-axis on a parent chart.\n\nThis is done by updating the parent chart's canvas configuration received via context.\n\n```\n<Chart>\n  <XAxis\n    type=\"time\",\n    label=\"My X-Axis Data\",\n    formatter=\"{value}GB\"\n  />\n</Chart>",
    "methods": [],
    "displayName": "XAxis",
    "props": {
      "XAxisProps": {
        "type": {
          "name": "type",
          "defaultValue": null,
          "description": "Type of axis.",
          "required": true,
          "type": {
            "name": "enum",
            "raw": "XAxisType",
            "value": [
              {
                "value": "\"value\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"log\""
              }
            ]
          },
          "tags": {}
        },
        "label": {
          "name": "label",
          "defaultValue": null,
          "description": "Label name of the axis.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "formatter": {
          "name": "formatter",
          "defaultValue": null,
          "description": "\nFormatter of axis label, which supports string template and callback function.\n\n```ts\nformatter: (value, index) => `${value}GB`\n```",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | AxisLabelValueFormatter",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "AxisLabelValueFormatter",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        }
      }
    }
  },
  {
    "tags": {},
    "description": "React component that can render an y-axis on a parent chart.\n\nThis is done by updating the parent chart's canvas configuration received via context.\n\n```\n<Chart>\n  <YAxis\n    type=\"value\",\n    label=\"My Y-Axis Data\",\n    formatter=\"{value}GB\"\n  />\n</Chart>",
    "methods": [],
    "displayName": "YAxis",
    "props": {
      "YAxisProps": {
        "type": {
          "name": "type",
          "defaultValue": null,
          "description": "Type of axis.",
          "required": true,
          "type": {
            "name": "enum",
            "raw": "YAxisType",
            "value": [
              {
                "value": "\"value\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"log\""
              }
            ]
          },
          "tags": {}
        },
        "label": {
          "name": "label",
          "defaultValue": null,
          "description": "Label name to be rendered on the axis.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "formatter": {
          "name": "formatter",
          "defaultValue": null,
          "description": "\nFormatter of axis label, which supports string template and callback function.\n\n```ts\n// Use callback.\nformatter: function (value, index) {\n  return value + 'kg';\n}\n```",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | AxisLabelValueFormatter",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "AxisLabelValueFormatter",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        }
      }
    }
  },
  {
    "tags": {},
    "description": "",
    "methods": [],
    "displayName": "makeLineData",
    "props": {
      "Number": {
        "toString": {
          "name": "toString",
          "defaultValue": {},
          "description": "Returns a string representation of an object.",
          "required": false,
          "type": {
            "name": "(radix?: number) => string"
          },
          "tags": {
            "param": "radix Specifies a radix for converting numeric values to strings. This value is only used for numbers."
          }
        },
        "toFixed": {
          "name": "toFixed",
          "defaultValue": null,
          "description": "Returns a string representing a number in fixed-point notation.",
          "required": true,
          "type": {
            "name": "(fractionDigits?: number) => string"
          },
          "tags": {
            "param": "fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        },
        "toExponential": {
          "name": "toExponential",
          "defaultValue": null,
          "description": "Returns a string containing a number represented in exponential notation.",
          "required": true,
          "type": {
            "name": "(fractionDigits?: number) => string"
          },
          "tags": {
            "param": "fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        },
        "toPrecision": {
          "name": "toPrecision",
          "defaultValue": null,
          "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
          "required": true,
          "type": {
            "name": "(precision?: number) => string"
          },
          "tags": {
            "param": "precision Number of significant digits. Must be in the range 1 - 21, inclusive."
          }
        },
        "valueOf": {
          "name": "valueOf",
          "defaultValue": {},
          "description": "Returns the primitive value of the specified object.",
          "required": false,
          "type": {
            "name": "() => number"
          },
          "tags": {}
        },
        "toLocaleString": {
          "name": "toLocaleString",
          "defaultValue": {},
          "description": "Converts a number to a string by using the current or specified locale.",
          "required": false,
          "type": {
            "name": "{ (locales?: string | string[], options?: NumberFormatOptions): string; (locales?: LocalesArgument, options?: NumberFormatOptions): string; }"
          },
          "tags": {
            "param": "locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\noptions An object that contains one or more properties that specify comparison options.\nlocales A locale string, array of locale strings, Intl.Locale object, or array of Intl.Locale objects that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\noptions An object that contains one or more properties that specify comparison options."
          }
        }
      }
    }
  }
]