import type { XAXisComponentOption, YAXisComponentOption } from 'echarts';
import type { LineSeriesOption } from 'echarts/charts';
import type { DatasetComponentOption, GridComponentOption, LegendComponentOption, TitleComponentOption, ToolboxComponentOption, TooltipComponentOption } from 'echarts/components';
import type { ComposeOption, EChartsType } from 'echarts/core';
import { Theme } from '@leafygreen-ui/lib';
export type AxisLabelValueFormatter = (value: number, index?: number) => string;
type RequiredSeriesProps = 'type' | 'name' | 'data';
export type EChartSeriesOption = Pick<LineSeriesOption, RequiredSeriesProps> & Partial<Omit<LineSeriesOption, RequiredSeriesProps>>;
/**
 * TODO: This might need to be improved. `ComposeOption` appears to make most base option
 * keys "Arrayable". This is making it difficult to properly test partial options on
 * methods like updateUtils > updateOptions(), since something like `options.grid` could be
 * an array even if an object.
 */
export type EChartOptions = ComposeOption<TooltipComponentOption | GridComponentOption | DatasetComponentOption | TitleComponentOption | LegendComponentOption | ToolboxComponentOption | XAXisComponentOption | YAXisComponentOption> & {
    series?: Array<EChartSeriesOption>;
};
export declare const EChartEvents: {
    readonly Click: "click";
    readonly DblClick: "dblclick";
    readonly MouseDown: "mousedown";
    readonly MouseUp: "mouseup";
    readonly MouseOver: "mouseover";
    readonly MouseOut: "mouseout";
    readonly MouseMove: "mousemove";
    readonly GlobalOut: "globalout";
    readonly ContextMenu: "contextmenu";
    readonly DragStart: "dragstart";
    readonly Drag: "drag";
    readonly DragEnd: "dragend";
    readonly BrushSelected: "brushselected";
    readonly BrushEnd: "brushEnd";
    readonly Brush: "brush";
    readonly LegendSelectChanged: "legendselectchanged";
    readonly LegendSelected: "legendselected";
    readonly LegendUnselected: "legendunselected";
    readonly LegendSelectAll: "legendselectall";
    readonly LegendInverseSelect: "legendinverseselect";
    readonly LegendScroll: "legendscroll";
    readonly DataZoom: "datazoom";
    readonly DataRangeSelected: "datarangeselected";
    readonly TimelineChanged: "timelinechanged";
    readonly TimelinePlayChanged: "timelineplaychanged";
    readonly Restore: "restore";
    readonly GeoRoam: "georoam";
    readonly GeoSelected: "geoselected";
    readonly GeoUnselected: "geounselected";
    readonly AxisAreaSelected: "axisareaselected";
    readonly FocusNodeAdjacency: "focusnodeadjacency";
    readonly UnfocusNodeAdjacency: "unfocusnodeadjacency";
    readonly Rendered: "rendered";
    readonly Finished: "finished";
    readonly MagicTypeChanged: "magictypechanged";
    readonly TooltipShown: "tooltipshown";
    readonly TooltipHidden: "tooltiphidden";
    readonly SelectChanged: "selectchanged";
    readonly GlobalCursorTaken: "globalcursortaken";
    readonly ZoomSelect: "zoomselect";
};
export type EChartEventsType = (typeof EChartEvents)[keyof typeof EChartEvents];
export interface EChartZoomSelectionEvent {
    xAxis?: {
        startValue: number;
        endValue: number;
    };
    yAxis?: {
        startValue: number;
        endValue: number;
    };
}
export interface EChartSetupZoomSelectProps {
    xAxis?: boolean;
    yAxis?: boolean;
}
interface EChartsEventHandlerType {
    (event: EChartEventsType, callback: (params: any) => void, options?: Partial<{
        useCanvasAsTrigger: boolean;
    }>): void;
    (event: 'zoomselect', callback: (params: EChartZoomSelectionEvent) => void, options?: Partial<{
        useCanvasAsTrigger: boolean;
    }>): void;
}
export interface EChartsInstance {
    _getEChartsInstance: () => EChartsType | null;
    _getOptions: () => Partial<EChartOptions>;
    addSeries: (series: EChartSeriesOption) => void;
    addToGroup: (groupId: string) => void;
    enableZoom: () => void;
    error: Error | null;
    hideTooltip: () => void;
    off: EChartsEventHandlerType;
    on: EChartsEventHandlerType;
    ready: boolean;
    removeFromGroup: () => void;
    removeSeries: (name: string) => void;
    resize: () => void;
    setupZoomSelect: (props: EChartSetupZoomSelectProps) => void;
    showTooltip: (x: number, y: number) => void;
    updateOptions: (options: Omit<Partial<EChartOptions>, 'series'>) => void;
}
export interface EChartHookProps {
    container: HTMLDivElement | null;
    initialOptions?: Partial<EChartOptions>;
    shouldEnableZoom?: boolean;
    theme: Theme;
}
export {};
//# sourceMappingURL=Echart.types.d.ts.map