[
  {
    "tags": {},
    "description": "",
    "methods": [],
    "displayName": "LeafyGreenProvider",
    "props": {
      "LeafyGreenProviderProps": {
        "popoverPortalContainer": {
          "name": "popoverPortalContainer",
          "defaultValue": null,
          "description": "Define a container HTMLElement for components that utilize the `Portal` component",
          "required": false,
          "type": {
            "name": "{ portalContainer?: HTMLElement; scrollContainer?: HTMLElement; }"
          },
          "tags": {}
        },
        "children": {
          "name": "children",
          "defaultValue": null,
          "description": "",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "Iterable<ReactNode>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        }
      },
      "TypographyProviderProps": {
        "baseFontSize": {
          "name": "baseFontSize",
          "defaultValue": null,
          "description": "The base font size of all LeafyGreen components unless overridden.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "FontSize",
            "value": [
              {
                "value": "14"
              },
              {
                "value": "16"
              }
            ]
          },
          "tags": {}
        }
      },
      "DarkModeProps": {
        "darkMode": {
          "name": "darkMode",
          "defaultValue": {
            "value": "false"
          },
          "description": "Renders the component with dark mode styles.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {
            "default": "false"
          }
        }
      }
    }
  },
  {
    "tags": {},
    "description": "Creates a global context for migration purposes.\nCall `useMigrationContext` to access the migration context",
    "methods": [],
    "displayName": "MigrationProvider",
    "props": {
      "MigrationProviderProps": {
        "children": {
          "name": "children",
          "defaultValue": null,
          "description": "",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "Iterable<ReactNode>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        }
      }
    }
  },
  {
    "tags": {},
    "description": "Creates a Popover context to read and write if a popover element is open in a modal\nCall `usePopoverContext` to access the popover state\nThis is defined separately from `PopoverPropsContext` to avoid incorrectly resetting `isPopoverOpen` value\nWe avoid renaming this provider because it will trigger major changes in all packages because\n`@leafygreen-ui/leafygreen-provider` is a peer dependency to all LG packages",
    "methods": [],
    "displayName": "PopoverProvider",
    "props": {
      "PopoverProviderProps": {
        "children": {
          "name": "children",
          "defaultValue": null,
          "description": "",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "Iterable<ReactNode>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        }
      }
    }
  },
  {
    "tags": {},
    "description": "Creates a PopoverProps context to pass props to a deeply nested popover element\nCall `usePopoverPropsContext` to access the popover state\nThis is defined separately from `PopoverContext` to avoid incorrectly resetting `isPopoverOpen` value",
    "methods": [],
    "displayName": "PopoverPropsProvider",
    "props": {
      "PopoverPropsProviderProps": {
        "spacing": {
          "name": "spacing",
          "defaultValue": null,
          "description": "Specifies the amount of spacing (in pixels) between the trigger element and the Popover content.\n\ndefault: `10`",
          "required": false,
          "type": {
            "name": "number"
          },
          "tags": {}
        },
        "popoverZIndex": {
          "name": "popoverZIndex",
          "defaultValue": null,
          "description": "Number that controls the z-index of the popover element directly.",
          "required": false,
          "type": {
            "name": "number"
          },
          "tags": {}
        },
        "children": {
          "name": "children",
          "defaultValue": null,
          "description": "",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "Iterable<ReactNode>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        }
      },
      "RenderPortalProps": {
        "renderMode": {
          "name": "renderMode",
          "defaultValue": null,
          "description": "Options to render the popover element",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"portal\" | \"inline\" | \"top-layer\"",
            "value": [
              {
                "value": "\"portal\""
              },
              {
                "value": "\"inline\""
              },
              {
                "value": "\"top-layer\""
              }
            ]
          },
          "tags": {
            "defaultValue": "'top-layer'\n'top-layer'\n'top-layer'",
            "param": "Inline will render the popover element inline in the DOM where it's written. This option is deprecated and will be removed in the future.\nPortal will render the popover element in a new div appended to the body. Alternatively, can be portaled into a provided `portalContainer`. This option is deprecated and will be removed in the future.\nTopLayer will render the popover element in the top layer\nInline will render the popover element inline in the DOM where it's written. This option is deprecated and will be removed in the future.\nPortal will render the popover element in a new div appended to the body. Alternatively, can be portaled into a provided `portalContainer`. This option is deprecated and will be removed in the future.\nTopLayer will render the popover element in the top layer\nInline will render the popover element inline in the DOM where it's written. This option is deprecated and will be removed in the future.\nPortal will render the popover element in a new div appended to the body. Alternatively, can be portaled into a provided `portalContainer`. This option is deprecated and will be removed in the future.\nTopLayer will render the popover element in the top layer"
          }
        },
        "dismissMode": {
          "name": "dismissMode",
          "defaultValue": null,
          "description": "When `renderMode=\"top-layer\"`, these options can control how a popover element is dismissed\n- `'auto'` will automatically handle dismissal on backdrop click or key press, ensuring only one popover is visible at a time\n- `'manual'` will require that the consumer handle dismissal manually",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "DismissMode",
            "value": [
              {
                "value": "\"auto\""
              },
              {
                "value": "\"manual\""
              }
            ]
          },
          "tags": {}
        },
        "onToggle": {
          "name": "onToggle",
          "defaultValue": null,
          "description": "When `renderMode=\"top-layer\"`, this callback function is called when the visibility of a popover element is toggled\nA callback function that is called when the visibility of a popover element rendered in the top layer is toggled",
          "required": false,
          "type": {
            "name": "(e: ToggleEvent) => void"
          },
          "tags": {}
        },
        "portalClassName": {
          "name": "portalClassName",
          "defaultValue": null,
          "description": "When `renderMode=\"portal\"`, it specifies a class name to apply to the portal element",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {
            "deprecated": ""
          }
        },
        "portalContainer": {
          "name": "portalContainer",
          "defaultValue": null,
          "description": "When `renderMode=\"portal\"`, it specifies an element to portal within. If not provided, a div is generated at the end of the body",
          "required": false,
          "type": {
            "name": "HTMLElement"
          },
          "tags": {
            "deprecated": ""
          }
        },
        "portalRef": {
          "name": "portalRef",
          "defaultValue": null,
          "description": "When `renderMode=\"portal\"`, it passes a ref to forward to the portal element",
          "required": false,
          "type": {
            "name": "MutableRefObject<HTMLElement>"
          },
          "tags": {
            "deprecated": ""
          }
        },
        "scrollContainer": {
          "name": "scrollContainer",
          "defaultValue": null,
          "description": "When `renderMode=\"portal\"`, it specifies the scrollable element to position relative to",
          "required": false,
          "type": {
            "name": "HTMLElement"
          },
          "tags": {
            "deprecated": ""
          }
        }
      },
      "BaseTransitionProps": {
        "onEnter": {
          "name": "onEnter",
          "defaultValue": null,
          "description": "Callback fired before the \"entering\" status is applied. An extra\nparameter `isAppearing` is supplied to indicate if the enter stage is\noccurring on the initial mount",
          "required": false,
          "type": {
            "name": "(isAppearing: boolean) => void"
          },
          "tags": {}
        },
        "onEntering": {
          "name": "onEntering",
          "defaultValue": null,
          "description": "Callback fired after the \"entering\" status is applied. An extra parameter\nisAppearing is supplied to indicate if the enter stage is occurring on\nthe initial mount",
          "required": false,
          "type": {
            "name": "(isAppearing: boolean) => void"
          },
          "tags": {}
        },
        "onEntered": {
          "name": "onEntered",
          "defaultValue": null,
          "description": "Callback fired after the \"entered\" status is applied. An extra parameter\nisAppearing is supplied to indicate if the enter stage is occurring on\nthe initial mount",
          "required": false,
          "type": {
            "name": "(isAppearing: boolean) => void"
          },
          "tags": {}
        },
        "onExit": {
          "name": "onExit",
          "defaultValue": null,
          "description": "Callback fired before the \"exiting\" status is applied.",
          "required": false,
          "type": {
            "name": "() => void"
          },
          "tags": {}
        },
        "onExiting": {
          "name": "onExiting",
          "defaultValue": null,
          "description": "Callback fired after the \"exiting\" status is applied.",
          "required": false,
          "type": {
            "name": "() => void"
          },
          "tags": {}
        },
        "onExited": {
          "name": "onExited",
          "defaultValue": null,
          "description": "Callback fired after the \"exited\" status is applied.",
          "required": false,
          "type": {
            "name": "() => void"
          },
          "tags": {}
        }
      }
    }
  },
  {
    "tags": {},
    "description": "",
    "methods": [],
    "displayName": "PortalContextProvider",
    "props": {
      "PortalContextInterface": {
        "popover": {
          "name": "popover",
          "defaultValue": {
            "value": "defaultPortalContextValues.popover"
          },
          "description": "",
          "required": false,
          "type": {
            "name": "{ portalContainer?: HTMLElement; scrollContainer?: HTMLElement; }"
          },
          "tags": {}
        },
        "children": {
          "name": "children",
          "defaultValue": null,
          "description": "",
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "Iterable<ReactNode>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        }
      }
    }
  },
  {
    "tags": {},
    "description": "",
    "methods": [],
    "displayName": "TypographyProvider",
    "props": {
      "TypographyProviderProps": {
        "baseFontSize": {
          "name": "baseFontSize",
          "defaultValue": {
            "value": 14
          },
          "description": "The base font size of all LeafyGreen components unless overridden.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "FontSize",
            "value": [
              {
                "value": "14"
              },
              {
                "value": "16"
              }
            ]
          },
          "tags": {}
        },
        "children": {
          "name": "children",
          "defaultValue": null,
          "description": "",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "Iterable<ReactNode>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        }
      }
    }
  },
  {
    "tags": {},
    "description": "",
    "methods": [],
    "displayName": "UsingKeyboardProvider",
    "props": {
      "UsingKeyboardProviderProps": {
        "children": {
          "name": "children",
          "defaultValue": null,
          "description": "",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "Iterable<ReactNode>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        }
      }
    }
  }
]