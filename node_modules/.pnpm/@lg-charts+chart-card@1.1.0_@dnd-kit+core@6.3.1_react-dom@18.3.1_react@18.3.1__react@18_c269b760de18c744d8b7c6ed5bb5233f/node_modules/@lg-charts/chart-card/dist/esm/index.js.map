{"version":3,"file":"index.js","sources":["../../src/ChartCard/ChartCard.types.ts","../../src/ChartCard/ChartCard.styles.ts","../../src/ChartCard/ChartCardContext.tsx","../../src/ChartCard/ChartCard.tsx"],"sourcesContent":["import React, { MouseEventHandler } from 'react';\n\nexport const ChartCardStates = {\n  Unset: 'unset',\n  Dragging: 'dragging',\n  Overlay: 'overlay',\n} as const;\nexport type ChartCardStates =\n  (typeof ChartCardStates)[keyof typeof ChartCardStates];\n\nexport interface ChartCardProps\n  extends Omit<React.ComponentPropsWithoutRef<'div'>, 'title'> {\n  /**\n   * The title of the card\n   */\n  title: React.ReactNode;\n\n  /**\n   * Defines the default state of the card\n   */\n  defaultOpen?: boolean;\n\n  /**\n   * Forces the card state\n   */\n  isOpen?: boolean;\n\n  /**\n   * Callback fired when user clicks the toggle button\n   */\n  onToggleButtonClick?: MouseEventHandler<HTMLButtonElement>;\n\n  /**\n   * Content to be rendered to the right of the label.\n   */\n  headerContent?: React.ReactNode;\n\n  /**\n   * Controls the current chart card state.\n   */\n  state?: ChartCardStates;\n\n  /**\n   * Unique identifier when using with `DragProvider`.\n   */\n  dragId?: string;\n}\n","import { CSS, Transform } from '@dnd-kit/utilities';\n\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport {\n  borderRadius,\n  color,\n  InteractionState,\n  spacing,\n  transitionDuration,\n  Variant,\n} from '@leafygreen-ui/tokens';\n\nimport { ChartCardStates } from './ChartCard.types';\n\nconst getBaseContainerStyles = (theme: Theme) => css`\n  background: ${color[theme].background[Variant.Primary][\n    InteractionState.Default\n  ]};\n  border: 1px solid\n    ${color[theme].border[Variant.Disabled][InteractionState.Default]};\n  border-radius: ${borderRadius[200]}px;\n  overflow: hidden;\n  width: 100%;\n  display: grid;\n  grid-template-rows: 40px 0fr;\n  transition: grid-template-rows ${transitionDuration.slower}ms ease-in-out;\n`;\n\nconst getSortableContainerStyles = (\n  transform: Transform | null,\n  transition?: string,\n) => css`\n  transform: ${CSS.Transform.toString(transform)};\n  transition: ${transition};\n`;\n\nconst getDraggingContainerStyles = () => css`\n  opacity: 0.3;\n`;\n\n// TODO: This should be a token once we audit our shadows\nconst getOverlayContainerStyles = () => css`\n  box-shadow: 0 18px 18px -15px rgba(0, 30, 43, 0.2);\n`;\n\nexport const getContainerStyles = ({\n  theme,\n  transition,\n  transform,\n  isDraggable,\n  isOpen,\n  state,\n  className,\n}: {\n  theme: Theme;\n  transition?: string;\n  transform: Transform | null;\n  isDraggable: boolean;\n  isOpen: boolean;\n  state: ChartCardStates;\n  className?: string;\n}) =>\n  cx(\n    getBaseContainerStyles(theme),\n    {\n      [openContainerStyles]: isOpen,\n      [getSortableContainerStyles(transform, transition)]: isDraggable,\n      [getDraggingContainerStyles()]: state === ChartCardStates.Dragging,\n      [getOverlayContainerStyles()]: state === ChartCardStates.Overlay,\n    },\n    className,\n  );\n\nexport const openContainerStyles = css`\n  grid-template-rows: 40px 1fr;\n`;\n\nexport const getHeaderStyles = ({\n  theme,\n  state,\n  isDraggable,\n  className,\n}: {\n  theme: Theme;\n  state: ChartCardStates;\n  isDraggable: boolean;\n  className?: string;\n}) =>\n  cx(\n    css`\n      width: 100%;\n      height: 100%;\n      padding: ${spacing[150]}px ${spacing[300]}px;\n      display: grid;\n      grid-template-columns: auto 1fr;\n      background: 'none';\n    `,\n    {\n      [css`\n        cursor: move;\n      `]: isDraggable,\n      [css`\n        background: ${color[theme].background[Variant.Primary][\n          InteractionState.Hover\n        ]};\n      `]: state === ChartCardStates.Overlay,\n    },\n    className,\n  );\n\nexport const childrenContainerStyles = css`\n  overflow: hidden;\n`;\n\nexport const toggleButtonStyles = css`\n  margin-right: ${spacing[100]}px;\n`;\n\nexport const toggleIconStyles = css`\n  transform: rotate(-90deg);\n  transition: transform ${transitionDuration.slower}ms ease-in-out;\n`;\n\nexport const openToggleIconStyles = css`\n  transform: rotate(0deg);\n`;\n\nexport const leftInnerContainerStyles = css`\n  display: flex;\n  align-items: center;\n`;\n","import React, { createContext, PropsWithChildren, useContext } from 'react';\n\nimport { ChartCardStates } from './ChartCard.types';\n\ninterface ChartCardContextType {\n  state: ChartCardStates;\n}\n\nconst ChartCardContext = createContext<ChartCardContextType | undefined>(\n  undefined,\n);\n\nexport function ChartCardProvider({\n  state,\n  children,\n}: PropsWithChildren<ChartCardContextType>) {\n  return (\n    <ChartCardContext.Provider value={{ state }}>\n      {children}\n    </ChartCardContext.Provider>\n  );\n}\n\nexport function useChartCardContext() {\n  return useContext(ChartCardContext);\n}\n","import React, { forwardRef, MouseEvent, useEffect, useState } from 'react';\nimport { useSortable } from '@dnd-kit/sortable';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useIdAllocator, useMergeRefs } from '@leafygreen-ui/hooks';\nimport Icon from '@leafygreen-ui/icon';\nimport IconButton from '@leafygreen-ui/icon-button';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport { BaseFontSize } from '@leafygreen-ui/tokens';\nimport { Body } from '@leafygreen-ui/typography';\n\nimport {\n  childrenContainerStyles,\n  getContainerStyles,\n  getHeaderStyles,\n  leftInnerContainerStyles,\n  openToggleIconStyles,\n  toggleButtonStyles,\n  toggleIconStyles,\n} from './ChartCard.styles';\nimport { ChartCardProps, ChartCardStates } from './ChartCard.types';\nimport { ChartCardProvider } from './ChartCardContext';\n\n/**\n * Card component that contains charts and can expand and collapse.\n */\nexport const ChartCard = forwardRef<HTMLDivElement, ChartCardProps>(\n  (\n    {\n      children,\n      className,\n      title,\n      headerContent,\n      defaultOpen = true,\n      isOpen: isControlledOpen,\n      onToggleButtonClick,\n      state = ChartCardStates.Unset,\n      dragId = '',\n      ...rest\n    },\n    forwardedRef,\n  ) => {\n    const { theme } = useDarkMode();\n    const isControlled = isControlledOpen !== undefined;\n\n    const [isOpen, setIsOpen] = useState(isControlledOpen ?? defaultOpen);\n\n    const toggleId = useIdAllocator({ prefix: 'expandable-chart-card-toggle' });\n    const childrenId = useIdAllocator({\n      prefix: 'expandable-chart-card-content',\n    });\n\n    const { attributes, listeners, setNodeRef, transform, transition, items } =\n      useSortable({\n        id: dragId,\n        attributes: {\n          /**\n           * By default the role of 'button' is assigned. This breaks accessibility\n           * because interactive controls can't be nested\n           * https://dequeuniversity.com/rules/axe/4.7/nested-interactive?application=axeAPI\n           */\n          role: '',\n        },\n      });\n    const isDraggable = !!(items.length && dragId);\n\n    // When the controlled prop changes, update the internal state\n    useEffect(() => {\n      if (isControlled) {\n        setIsOpen(isControlledOpen ?? defaultOpen);\n      }\n    }, [defaultOpen, isControlled, isControlledOpen]);\n\n    function handleToggleButtonClick(e: MouseEvent<HTMLButtonElement>) {\n      if (!isControlled) {\n        setIsOpen(currState => !currState);\n      }\n      onToggleButtonClick?.(e);\n    }\n\n    return (\n      <ChartCardProvider state={state}>\n        {/*\n          data attributes used by DragProvider to determine open/closed states\n          when a ChartCard is picked up, and it's overlay is rendered\n        */}\n        <div\n          className={getContainerStyles({\n            theme,\n            transition,\n            transform,\n            isDraggable,\n            isOpen,\n            state,\n            className,\n          })}\n          ref={useMergeRefs([setNodeRef, forwardedRef])}\n          data-drag-id={dragId}\n          data-is-open={isOpen}\n          {...rest}\n        >\n          <div\n            className={getHeaderStyles({\n              theme,\n              state,\n              isDraggable,\n              className,\n            })}\n            data-testid=\"lg-charts-core-chart_card-header\"\n            {...attributes}\n            {...listeners}\n          >\n            <div className={leftInnerContainerStyles}>\n              <IconButton\n                className={toggleButtonStyles}\n                id={toggleId}\n                aria-label=\"Toggle button\"\n                aria-controls={childrenId}\n                aria-expanded={isOpen}\n                onClick={handleToggleButtonClick}\n                data-testid=\"lg-charts-core-chart_card-toggle-button\"\n                data-no-dnd={true}\n              >\n                <Icon\n                  glyph=\"ChevronDown\"\n                  className={cx(toggleIconStyles, {\n                    [openToggleIconStyles]: isOpen,\n                  })}\n                />\n              </IconButton>\n              <Body weight=\"medium\" baseFontSize={BaseFontSize.Body2}>\n                {title}\n              </Body>\n            </div>\n            {/** Prevents drag and drop trigger on header content */}\n            <div data-no-dnd={true}>{headerContent}</div>\n          </div>\n          <div className={childrenContainerStyles}>\n            <div\n              role=\"region\"\n              id={childrenId}\n              aria-labelledby={toggleId}\n              aria-hidden={!isOpen}\n              data-testid=\"lg-charts-core-chart_card-children\"\n            >\n              {children}\n            </div>\n          </div>\n        </div>\n      </ChartCardProvider>\n    );\n  },\n);\n\nChartCard.displayName = 'ChartCard';\n"],"names":["_templateObject","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","_templateObject9","_templateObject0","_templateObject1","_templateObject10","_templateObject11","ChartCardStates","Unset","Dragging","Overlay","getContainerStyles","_ref","theme","transition","transform","isDraggable","isOpen","state","className","cx","css","_taggedTemplateLiteral","color","background","Variant","Primary","InteractionState","Default","border","Disabled","borderRadius","transitionDuration","slower","getBaseContainerStyles","_defineProperty","openContainerStyles","CSS","Transform","toString","getSortableContainerStyles","getHeaderStyles","_ref2","spacing","Hover","childrenContainerStyles","toggleButtonStyles","toggleIconStyles","openToggleIconStyles","leftInnerContainerStyles","ChartCardContext","createContext","undefined","ChartCardProvider","children","React","createElement","Provider","value","useChartCardContext","useContext","_excluded","ChartCard","forwardRef","forwardedRef","title","headerContent","_ref$defaultOpen","defaultOpen","isControlledOpen","onToggleButtonClick","_ref$state","_ref$dragId","dragId","rest","_objectWithoutProperties","useDarkMode","isControlled","_useState2","_slicedToArray","useState","setIsOpen","toggleId","useIdAllocator","prefix","childrenId","_useSortable","useSortable","id","attributes","role","listeners","setNodeRef","items","length","useEffect","_extends","ref","useMergeRefs","IconButton","onClick","e","currState","Icon","glyph","Body","weight","baseFontSize","BaseFontSize","Body2","displayName"],"mappings":"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"}