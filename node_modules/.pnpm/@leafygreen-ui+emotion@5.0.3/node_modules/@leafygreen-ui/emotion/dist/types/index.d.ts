import emotion from './emotion';
export declare const flush: () => void, hydrate: (ids: Array<string>) => void, cx: (...classNames: Array<import("@emotion/css/types/create-instance").ClassNamesArg>) => string, merge: (className: string) => string, getRegisteredStyles: (registeredStyles: Array<string>, className: string) => string, injectGlobal: {
    (template: TemplateStringsArray, ...args: Array<import("@emotion/css/types/create-instance").CSSInterpolation>): void;
    (...args: Array<import("@emotion/css/types/create-instance").CSSInterpolation>): void;
}, keyframes: {
    (template: TemplateStringsArray, ...args: Array<import("@emotion/css/types/create-instance").CSSInterpolation>): string;
    (...args: Array<import("@emotion/css/types/create-instance").CSSInterpolation>): string;
}, css: {
    (template: TemplateStringsArray, ...args: Array<import("@emotion/css/types/create-instance").CSSInterpolation>): string;
    (...args: Array<import("@emotion/css/types/create-instance").CSSInterpolation>): string;
}, sheet: import("@emotion/css/types/create-instance").CSSStyleSheet, cache: import("@emotion/css/types/create-instance").EmotionCache;
export declare const extractCritical: (html: string) => import("@emotion/server/create-instance").EmotionCritical, renderStylesToString: (html: string) => string, renderStylesToNodeStream: () => NodeJS.ReadWriteStream;
export default emotion;
//# sourceMappingURL=index.d.ts.map