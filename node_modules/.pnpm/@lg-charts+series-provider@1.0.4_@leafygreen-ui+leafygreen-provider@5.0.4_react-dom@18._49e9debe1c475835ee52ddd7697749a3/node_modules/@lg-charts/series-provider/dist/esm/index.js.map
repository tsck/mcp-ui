{"version":3,"file":"index.js","sources":["../../src/SeriesContext.tsx"],"sourcesContent":["import React, {\n  createContext,\n  PropsWithChildren,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { colors as defaultColors } from '@lg-charts/colors';\n\nimport { Theme } from '@leafygreen-ui/lib';\n\nimport {\n  SeriesContextType,\n  SeriesName,\n  SeriesProviderProps,\n} from './SeriesContext.types';\n\nexport const SeriesContext = createContext<SeriesContextType>({\n  getColor: () => '',\n  getSeriesIndex: () => -1,\n  isChecked: () => true,\n  isSelectAllChecked: () => true,\n  isSelectAllIndeterminate: () => false,\n  toggleSeries: () => {},\n  toggleSelectAll: () => {},\n});\n\nconst hasDuplicates = (arr: Array<string>) => {\n  return new Set(arr).size !== arr.length;\n};\n\nexport const SeriesProvider = ({\n  children,\n  customColors,\n  series,\n}: PropsWithChildren<SeriesProviderProps>) => {\n  const [checkedState, setCheckedState] = useState<Set<SeriesName>>(\n    () => new Set(series),\n  );\n\n  useEffect(() => {\n    if (process.env.NODE_ENV === 'production' || !customColors) {\n      return;\n    }\n\n    for (const colors of Object.values(customColors)) {\n      if (colors && hasDuplicates(colors)) {\n        console.warn(\n          'customColors provided to SeriesProvider should not contain duplicates. This may lead to unexpected behavior.',\n        );\n      }\n    }\n  }, [customColors]);\n\n  const getSeriesIndex = useCallback(\n    (name: SeriesName) => series.indexOf(name),\n    [series],\n  );\n\n  const getColor = useCallback(\n    (name: SeriesName, theme: Theme) => {\n      const colors = customColors ? customColors[theme] : defaultColors[theme];\n      const index = getSeriesIndex(name) % colors.length; // loop through colors if more series than available colors\n      return colors[index];\n    },\n    [customColors, getSeriesIndex],\n  );\n\n  const isChecked = useCallback(\n    (name: SeriesName) => checkedState.has(name),\n    [checkedState],\n  );\n\n  const isSelectAllChecked = useCallback(\n    () => checkedState.size === series.length,\n    [checkedState, series],\n  );\n\n  const isSelectAllIndeterminate = useCallback(\n    () => checkedState.size > 0 && checkedState.size < series.length,\n    [checkedState, series],\n  );\n\n  const toggleSeries = useCallback((name: SeriesName) => {\n    setCheckedState(prev => {\n      const newSet = new Set(prev);\n\n      if (newSet.has(name)) {\n        newSet.delete(name);\n      } else {\n        newSet.add(name);\n      }\n\n      return newSet;\n    });\n  }, []);\n\n  const toggleSelectAll = useCallback(() => {\n    setCheckedState(() => {\n      const newSet = isSelectAllChecked()\n        ? new Set<SeriesName>()\n        : new Set(series);\n      return newSet;\n    });\n  }, [isSelectAllChecked, series]);\n\n  const value = useMemo(\n    () => ({\n      getColor,\n      getSeriesIndex,\n      isChecked,\n      isSelectAllChecked,\n      isSelectAllIndeterminate,\n      toggleSeries,\n      toggleSelectAll,\n    }),\n    [\n      getColor,\n      getSeriesIndex,\n      isChecked,\n      isSelectAllChecked,\n      isSelectAllIndeterminate,\n      toggleSeries,\n      toggleSelectAll,\n    ],\n  );\n\n  return (\n    <SeriesContext.Provider value={value}>{children}</SeriesContext.Provider>\n  );\n};\n\nexport const useSeriesContext = () => {\n  const context = useContext(SeriesContext);\n  if (!context)\n    throw new Error('useSeriesContext must be used within a SeriesProvider');\n  return context;\n};\n"],"names":["SeriesContext","createContext","getColor","getSeriesIndex","isChecked","isSelectAllChecked","isSelectAllIndeterminate","toggleSeries","toggleSelectAll","hasDuplicates","arr","Set","size","length","SeriesProvider","_ref","children","customColors","series","_useState2","_slicedToArray","useState","checkedState","setCheckedState","useEffect","process","env","NODE_ENV","_i","_Object$values","Object","values","colors","console","warn","useCallback","name","indexOf","theme","defaultColors","has","prev","newSet","delete","add","value","useMemo","React","createElement","Provider","useSeriesContext","context","useContext","Error"],"mappings":"unCAGU,IAACA,EAA6BC,EAAc,CACpDC,SAAU,WACR,MAAO,EACR,EACDC,eAAgB,WACd,OAAQ,CACT,EACDC,UAAW,WACT,OAAO,CACR,EACDC,mBAAoB,WAClB,OAAO,CACR,EACDC,yBAA0B,WACxB,OAAO,CACR,EACDC,aAAc,WAA0B,EACxCC,gBAAiB,WAA6B,IAE5CC,EAAgB,SAAuBC,GACzC,OAAO,IAAIC,IAAID,GAAKE,OAASF,EAAIG,MACnC,EACWC,EAAiB,SAAwBC,GAClD,IAAIC,EAAWD,EAAKC,SAClBC,EAAeF,EAAKE,aACpBC,EAASH,EAAKG,OAIdC,EAAaC,EAHCC,EAAS,WACrB,OAAO,IAAIV,IAAIO,EACrB,GAC2C,GACvCI,EAAeH,EAAW,GAC1BI,EAAkBJ,EAAW,GAC/BK,EAAU,WACR,GAA6B,eAAzBC,QAAQC,IAAIC,UAA8BV,EAG9C,IAAK,IAAIW,EAAK,EAAGC,EAAiBC,OAAOC,OAAOd,GAAeW,EAAKC,EAAehB,OAAQe,IAAM,CAC/F,IAAII,EAASH,EAAeD,GACxBI,GAAUvB,EAAcuB,IAC1BC,QAAQC,KAAK,+GAEhB,CACL,EAAK,CAACjB,IACJ,IAAId,EAAiBgC,EAAY,SAAUC,GACzC,OAAOlB,EAAOmB,QAAQD,EAC1B,EAAK,CAAClB,IACAhB,EAAWiC,EAAY,SAAUC,EAAME,GACzC,IAAIN,EAASf,EAAeA,EAAaqB,GAASC,EAAcD,GAEhE,OAAON,EADK7B,EAAeiC,GAAQJ,EAAOnB,OAE9C,EAAK,CAACI,EAAcd,IACdC,EAAY+B,EAAY,SAAUC,GACpC,OAAOd,EAAakB,IAAIJ,EAC5B,EAAK,CAACd,IACAjB,EAAqB8B,EAAY,WACnC,OAAOb,EAAaV,OAASM,EAAOL,MACxC,EAAK,CAACS,EAAcJ,IACdZ,EAA2B6B,EAAY,WACzC,OAAOb,EAAaV,KAAO,GAAKU,EAAaV,KAAOM,EAAOL,MAC/D,EAAK,CAACS,EAAcJ,IACdX,EAAe4B,EAAY,SAAUC,GACvCb,EAAgB,SAAUkB,GACxB,IAAIC,EAAS,IAAI/B,IAAI8B,GAMrB,OALIC,EAAOF,IAAIJ,GACbM,EAAOC,OAAOP,GAEdM,EAAOE,IAAIR,GAENM,CACb,EACG,EAAE,IACClC,EAAkB2B,EAAY,WAChCZ,EAAgB,WAEd,OADalB,IAAuB,IAAIM,IAAQ,IAAIA,IAAIO,EAE9D,EACA,EAAK,CAACb,EAAoBa,IACpB2B,EAAQC,EAAQ,WAClB,MAAO,CACL5C,SAAUA,EACVC,eAAgBA,EAChBC,UAAWA,EACXC,mBAAoBA,EACpBC,yBAA0BA,EAC1BC,aAAcA,EACdC,gBAAiBA,EAEvB,EAAK,CAACN,EAAUC,EAAgBC,EAAWC,EAAoBC,EAA0BC,EAAcC,IACrG,OAAoBuC,EAAMC,cAAchD,EAAciD,SAAU,CAC9DJ,MAAOA,GACN7B,EACL,EACWkC,EAAmB,WAC5B,IAAIC,EAAUC,EAAWpD,GACzB,IAAKmD,EAAS,MAAM,IAAIE,MAAM,yDAC9B,OAAOF,CACT"}