/**
 * The element property a color token applies to
 */
declare const Property: {
    readonly Background: "background";
    readonly Border: "border";
    readonly Icon: "icon";
    readonly Text: "text";
};
type Property = (typeof Property)[keyof typeof Property];
/**
 * The context variant in which a color token should be applied
 */
declare const Variant: {
    readonly Disabled: "disabled";
    readonly Placeholder: "placeholder";
    readonly Primary: "primary";
    readonly Secondary: "secondary";
    readonly InversePrimary: "inversePrimary";
    readonly InverseSecondary: "inverseSecondary";
    readonly Info: "info";
    readonly Warning: "warning";
    readonly Error: "error";
    readonly Success: "success";
    readonly Link: "link";
};
type Variant = (typeof Variant)[keyof typeof Variant];
/**
 * The interaction state in which a color token should be applied
 */
declare const InteractionState: {
    readonly Default: "default";
    readonly Hover: "hover";
    readonly Focus: "focus";
};
type InteractionState = (typeof InteractionState)[keyof typeof InteractionState];
/**
 * A partial Record,
 * mapping a subset of {@link Variant} keys
 * to a Record of {@link InteractionState} color tokens
 */
export type VariantColorRecord = Partial<Record<Variant, Record<InteractionState, string>>>;
/**
 * A Record mapping {@link Property} keys to {@link VariantColorRecord}
 */
export type PropertyColorRecord = Record<Property, VariantColorRecord>;
export { InteractionState, Property, Variant };
//# sourceMappingURL=color.types.d.ts.map