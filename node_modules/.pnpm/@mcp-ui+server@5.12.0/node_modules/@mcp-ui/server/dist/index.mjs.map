{"version":3,"file":"index.mjs","sources":["../src/types.ts","../src/adapters/appssdk/adapter-runtime.bundled.ts","../src/adapters/appssdk/adapter.ts","../src/utils.ts","../src/index.ts"],"sourcesContent":["import type { EmbeddedResource, Resource } from '@modelcontextprotocol/sdk/types.js';\n\n// Primary identifier for the resource. Starts with ui://`\nexport type URI = `ui://${string}`;\n\n// text/html for rawHtml content, text/uri-list for externalUrl content\nexport type MimeType =\n  | 'text/html'\n  | 'text/html+skybridge'\n  | 'text/uri-list'\n  | 'application/vnd.mcp-ui.remote-dom+javascript; framework=react'\n  | 'application/vnd.mcp-ui.remote-dom+javascript; framework=webcomponents';\n\nexport type HTMLTextContent = {\n  uri: URI;\n  mimeType: MimeType;\n  text: string; // HTML content (for mimeType `text/html`), or iframe URL (for mimeType `text/uri-list`)\n  blob?: never;\n  _meta?: Record<string, unknown>;\n};\n\nexport type Base64BlobContent = {\n  uri: URI;\n  mimeType: MimeType;\n  blob: string; //  Base64 encoded HTML content (for mimeType `text/html`), or iframe URL (for mimeType `text/uri-list`)\n  text?: never;\n  _meta?: Record<string, unknown>;\n};\n\nexport type ResourceContentPayload =\n  | { type: 'rawHtml'; htmlString: string }\n  | { type: 'externalUrl'; iframeUrl: string }\n  | {\n      type: 'remoteDom';\n      script: string;\n      framework: 'react' | 'webcomponents';\n    };\n\nexport interface CreateUIResourceOptions {\n  uri: URI;\n  content: ResourceContentPayload;\n  encoding: 'text' | 'blob';\n  // specific mcp-ui metadata\n  uiMetadata?: UIResourceMetadata;\n  // additional metadata to be passed on _meta\n  metadata?: Record<string, unknown>;\n  // additional resource props to be passed on the resource itself\n  resourceProps?: UIResourceProps;\n  // additional resource props to be passed on the top-level embedded resource (i.e. annotations)\n  embeddedResourceProps?: EmbeddedUIResourceProps;\n  // Adapters for different environments (e.g., Apps SDK)\n  adapters?: AdaptersConfig;\n}\n\n/**\n * Configuration for all available adapters\n * Adapters enable MCP-UI widgets to work in different environments\n */\nexport interface AdaptersConfig {\n  /**\n   * Apps SDK adapter (e.g., ChatGPT)\n   * Translates MCP-UI protocol to Apps SDK API calls (window.openai)\n   */\n  appsSdk?: AppsSdkAdapterOptions;\n  \n  // Future adapters can be added here\n  // e.g., anotherPlatform?: AnotherPlatformAdapterOptions;\n}\n\n/**\n * Configuration options for Apps SDK adapter\n */\nexport interface AppsSdkAdapterOptions {\n  /**\n   * Whether to enable the Apps SDK adapter.\n   * When enabled, the adapter script will be automatically injected into HTML content,\n   * allowing MCP-UI widgets to work in Apps SDK environments (e.g., ChatGPT).\n   * @default false\n   */\n  enabled: boolean;\n\n  /**\n   * Custom configuration for the adapter\n   */\n  config?: {\n    /**\n     * How to handle 'intent' messages (defaults to 'prompt')\n     * - 'prompt': Convert to sendFollowupTurn with intent description\n     * - 'ignore': Log and acknowledge but take no action\n     */\n    intentHandling?: 'prompt' | 'ignore';\n\n    /**\n     * Timeout in milliseconds for async operations (defaults to 30000)\n     */\n    timeout?: number;\n\n    /**\n     * Origin to use when dispatching MessageEvents to the iframe (defaults to window.location.origin)\n     */\n    hostOrigin?: string;\n  };\n\n  /**\n   * MIME type to use when this adapter is enabled.\n   * @default 'text/html+skybridge'\n   */\n  mimeType?: string;\n}\n\nexport type UIResourceProps = Omit<Partial<Resource>, 'uri' | 'mimeType'>;\nexport type EmbeddedUIResourceProps = Omit<Partial<EmbeddedResource>, 'resource' | 'type'>;\n\nexport const UIMetadataKey = {\n  PREFERRED_FRAME_SIZE: 'preferred-frame-size',\n  INITIAL_RENDER_DATA: 'initial-render-data',\n} as const;\n\nexport const UI_METADATA_PREFIX = 'mcpui.dev/ui-';\n\nexport type UIResourceMetadata = {\n  [UIMetadataKey.PREFERRED_FRAME_SIZE]?: [string, string];\n  [UIMetadataKey.INITIAL_RENDER_DATA]?: Record<string, unknown>;\n};\n\nexport type UIActionType = 'tool' | 'prompt' | 'link' | 'intent' | 'notify';\n\ntype GenericActionMessage = {\n  messageId?: string;\n};\n\nexport type UIActionResultToolCall = GenericActionMessage & {\n  type: 'tool';\n  payload: {\n    toolName: string;\n    params: Record<string, unknown>;\n  };\n};\n\nexport type UIActionResultPrompt = GenericActionMessage & {\n  type: 'prompt';\n  payload: {\n    prompt: string;\n  };\n};\n\nexport type UIActionResultLink = GenericActionMessage & {\n  type: 'link';\n  payload: {\n    url: string;\n  };\n};\n\nexport type UIActionResultIntent = GenericActionMessage & {\n  type: 'intent';\n  payload: {\n    intent: string;\n    params: Record<string, unknown>;\n  };\n};\n\nexport type UIActionResultNotification = GenericActionMessage & {\n  type: 'notify';\n  payload: {\n    message: string;\n  };\n};\n\nexport type UIActionResult =\n  | UIActionResultToolCall\n  | UIActionResultPrompt\n  | UIActionResultLink\n  | UIActionResultIntent\n  | UIActionResultNotification;\n","// This file is auto-generated by scripts/bundle-adapter.js\n// Do not edit directly - modify adapter-runtime.ts instead\n\nexport const ADAPTER_RUNTIME_SCRIPT = \"\\\"use strict\\\";\\n(() => {\\n  var __defProp = Object.defineProperty;\\n  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\\n  var __publicField = (obj, key, value) => {\\n    __defNormalProp(obj, typeof key !== \\\"symbol\\\" ? key + \\\"\\\" : key, value);\\n    return value;\\n  };\\n\\n  // src/adapters/appssdk/adapter-runtime.ts\\n  var MCPUIAppsSdkAdapter = class {\\n    constructor(config = {}) {\\n      __publicField(this, \\\"config\\\");\\n      __publicField(this, \\\"pendingRequests\\\", /* @__PURE__ */ new Map());\\n      __publicField(this, \\\"messageIdCounter\\\", 0);\\n      __publicField(this, \\\"originalPostMessage\\\", null);\\n      this.config = {\\n        logger: config.logger || console,\\n        hostOrigin: config.hostOrigin || window.location.origin,\\n        timeout: config.timeout || 3e4,\\n        intentHandling: config.intentHandling || \\\"prompt\\\"\\n      };\\n    }\\n    /**\\n     * Initialize the adapter and monkey-patch postMessage if Apps SDK is present\\n     */\\n    install() {\\n      if (!window.openai) {\\n        this.config.logger.warn(\\\"[MCPUI-Apps SDK Adapter] window.openai not detected. Adapter will not activate.\\\");\\n        return false;\\n      }\\n      this.config.logger.log(\\\"[MCPUI-Apps SDK Adapter] Initializing adapter...\\\");\\n      this.patchPostMessage();\\n      this.setupAppsSdkEventListeners();\\n      this.sendRenderData();\\n      this.config.logger.log(\\\"[MCPUI-Apps SDK Adapter] Adapter initialized successfully\\\");\\n      return true;\\n    }\\n    /**\\n     * Clean up pending requests and restore original postMessage\\n     */\\n    uninstall() {\\n      for (const request of this.pendingRequests.values()) {\\n        clearTimeout(request.timeoutId);\\n        request.reject(new Error(\\\"Adapter uninstalled\\\"));\\n      }\\n      this.pendingRequests.clear();\\n      if (this.originalPostMessage) {\\n        try {\\n          const parentWindow = window.parent ?? null;\\n          if (parentWindow) {\\n            parentWindow.postMessage = this.originalPostMessage;\\n          }\\n          this.config.logger.log(\\\"[MCPUI-Apps SDK Adapter] Restored original parent.postMessage\\\");\\n        } catch (error) {\\n          this.config.logger.error(\\\"[MCPUI-Apps SDK Adapter] Failed to restore original postMessage:\\\", error);\\n        }\\n      }\\n      this.config.logger.log(\\\"[MCPUI-Apps SDK Adapter] Adapter uninstalled\\\");\\n    }\\n    /**\\n     * Monkey-patch parent.postMessage to intercept MCP-UI messages\\n     * and forward non-MCP-UI messages to the original postMessage\\n     */\\n    patchPostMessage() {\\n      const parentWindow = window.parent ?? null;\\n      this.originalPostMessage = parentWindow?.postMessage?.bind(parentWindow) ?? null;\\n      if (!this.originalPostMessage) {\\n        this.config.logger.debug(\\\"[MCPUI-Apps SDK Adapter] parent.postMessage does not exist, installing shim only\\\");\\n      } else {\\n        this.config.logger.debug(\\\"[MCPUI-Apps SDK Adapter] Monkey-patching parent.postMessage to intercept MCP-UI messages\\\");\\n      }\\n      const postMessageInterceptor = (message, targetOriginOrOptions, transfer) => {\\n        if (this.isMCPUIMessage(message)) {\\n          const mcpMessage = message;\\n          this.config.logger.debug(\\\"[MCPUI-Apps SDK Adapter] Intercepted MCP-UI message:\\\", mcpMessage.type);\\n          this.handleMCPUIMessage(mcpMessage);\\n        } else {\\n          if (this.originalPostMessage) {\\n            this.config.logger.debug(\\\"[MCPUI-Apps SDK Adapter] Forwarding non-MCP-UI message to original postMessage\\\");\\n            if (typeof targetOriginOrOptions === \\\"string\\\" || targetOriginOrOptions === void 0) {\\n              const targetOrigin = targetOriginOrOptions ?? \\\"*\\\";\\n              this.originalPostMessage(message, targetOrigin, transfer);\\n            } else {\\n              this.originalPostMessage(message, targetOriginOrOptions);\\n            }\\n          } else {\\n            this.config.logger.warn(\\\"[MCPUI-Apps SDK Adapter] No original postMessage to forward to, ignoring message:\\\", message);\\n          }\\n        }\\n      };\\n      try {\\n        if (parentWindow) {\\n          parentWindow.postMessage = postMessageInterceptor;\\n        }\\n      } catch (error) {\\n        this.config.logger.error(\\\"[MCPUI-Apps SDK Adapter] Failed to monkey-patch parent.postMessage:\\\", error);\\n      }\\n    }\\n    /**\\n     * Check if a message is an MCP-UI protocol message\\n     */\\n    isMCPUIMessage(message) {\\n      if (!message || typeof message !== \\\"object\\\") {\\n        return false;\\n      }\\n      const msg = message;\\n      return typeof msg.type === \\\"string\\\" && (msg.type.startsWith(\\\"ui-\\\") || [\\\"tool\\\", \\\"prompt\\\", \\\"intent\\\", \\\"notify\\\", \\\"link\\\"].includes(msg.type));\\n    }\\n    /**\\n     * Handle incoming MCP-UI messages and translate to Apps SDK actions\\n     */\\n    async handleMCPUIMessage(message) {\\n      this.config.logger.debug(\\\"[MCPUI-Apps SDK Adapter] Received MCPUI message:\\\", message.type);\\n      try {\\n        switch (message.type) {\\n          case \\\"tool\\\":\\n            await this.handleToolMessage(message);\\n            break;\\n          case \\\"prompt\\\":\\n            await this.handlePromptMessage(message);\\n            break;\\n          case \\\"intent\\\":\\n            await this.handleIntentMessage(message);\\n            break;\\n          case \\\"notify\\\":\\n            await this.handleNotifyMessage(message);\\n            break;\\n          case \\\"link\\\":\\n            await this.handleLinkMessage(message);\\n            break;\\n          case \\\"ui-lifecycle-iframe-ready\\\":\\n            this.sendRenderData();\\n            break;\\n          case \\\"ui-request-render-data\\\":\\n            this.sendRenderData(message.messageId);\\n            break;\\n          case \\\"ui-size-change\\\":\\n            this.handleSizeChange(message);\\n            break;\\n          case \\\"ui-request-data\\\":\\n            this.handleRequestData(message);\\n            break;\\n          default:\\n            this.config.logger.warn(\\\"[MCPUI-Apps SDK Adapter] Unknown message type:\\\", message.type);\\n        }\\n      } catch (error) {\\n        this.config.logger.error(\\\"[MCPUI-Apps SDK Adapter] Error handling message:\\\", error);\\n        if (message.messageId) {\\n          this.sendErrorResponse(message.messageId, error);\\n        }\\n      }\\n    }\\n    /**\\n     * Handle 'tool' message - call Apps SDK tool\\n     */\\n    async handleToolMessage(message) {\\n      if (message.type !== \\\"tool\\\")\\n        return;\\n      const { toolName, params } = message.payload;\\n      const messageId = message.messageId || this.generateMessageId();\\n      this.sendAcknowledgment(messageId);\\n      try {\\n        if (!window.openai?.callTool) {\\n          throw new Error(\\\"Tool calling is not supported in this environment\\\");\\n        }\\n        const result = await this.withTimeout(\\n          window.openai.callTool(toolName, params),\\n          messageId\\n        );\\n        this.sendSuccessResponse(messageId, result);\\n      } catch (error) {\\n        this.sendErrorResponse(messageId, error);\\n      }\\n    }\\n    /**\\n     * Handle 'prompt' message - send followup turn\\n     */\\n    async handlePromptMessage(message) {\\n      if (message.type !== \\\"prompt\\\")\\n        return;\\n      const prompt = message.payload.prompt;\\n      const messageId = message.messageId || this.generateMessageId();\\n      this.sendAcknowledgment(messageId);\\n      try {\\n        if (!window.openai?.sendFollowUpMessage) {\\n          throw new Error(\\\"Followup turns are not supported in this environment\\\");\\n        }\\n        await this.withTimeout(\\n          window.openai.sendFollowUpMessage({ prompt }),\\n          messageId\\n        );\\n        this.sendSuccessResponse(messageId, { success: true });\\n      } catch (error) {\\n        this.sendErrorResponse(messageId, error);\\n      }\\n    }\\n    /**\\n     * Handle 'intent' message - convert to prompt or ignore based on config\\n     */\\n    async handleIntentMessage(message) {\\n      if (message.type !== \\\"intent\\\")\\n        return;\\n      const messageId = message.messageId || this.generateMessageId();\\n      this.sendAcknowledgment(messageId);\\n      if (this.config.intentHandling === \\\"ignore\\\") {\\n        this.config.logger.log(\\\"[MCPUI-Apps SDK Adapter] Intent ignored:\\\", message.payload.intent);\\n        this.sendSuccessResponse(messageId, { ignored: true });\\n        return;\\n      }\\n      const { intent, params } = message.payload;\\n      const prompt = `${intent}${params ? `: ${JSON.stringify(params)}` : \\\"\\\"}`;\\n      try {\\n        if (!window.openai?.sendFollowUpMessage) {\\n          throw new Error(\\\"Followup turns are not supported in this environment\\\");\\n        }\\n        await this.withTimeout(\\n          window.openai.sendFollowUpMessage({ prompt }),\\n          messageId\\n        );\\n        this.sendSuccessResponse(messageId, { success: true });\\n      } catch (error) {\\n        this.sendErrorResponse(messageId, error);\\n      }\\n    }\\n    /**\\n     * Handle 'notify' message - log only\\n     */\\n    async handleNotifyMessage(message) {\\n      if (message.type !== \\\"notify\\\")\\n        return;\\n      const messageId = message.messageId || this.generateMessageId();\\n      this.config.logger.log(\\\"[MCPUI-Apps SDK Adapter] Notification:\\\", message.payload.message);\\n      this.sendAcknowledgment(messageId);\\n      this.sendSuccessResponse(messageId, { acknowledged: true });\\n    }\\n    /**\\n     * Handle 'link' message - not supported in Apps SDK environments\\n     */\\n    async handleLinkMessage(message) {\\n      if (message.type !== \\\"link\\\")\\n        return;\\n      const messageId = message.messageId || this.generateMessageId();\\n      this.sendAcknowledgment(messageId);\\n      this.sendErrorResponse(messageId, new Error(\\\"Navigation is not supported in Apps SDK environment\\\"));\\n    }\\n    /**\\n     * Handle size change - no-op in Apps SDK environment\\n     */\\n    handleSizeChange(message) {\\n      this.config.logger.debug(\\\"[MCPUI-Apps SDK Adapter] Size change requested (no-op in Apps SDK):\\\", message.payload);\\n    }\\n    /**\\n     * Handle generic data request\\n     */\\n    handleRequestData(message) {\\n      const messageId = message.messageId || this.generateMessageId();\\n      this.sendAcknowledgment(messageId);\\n      this.sendErrorResponse(messageId, new Error(\\\"Generic data requests not yet implemented\\\"));\\n    }\\n    /**\\n     * Setup listeners for Apps SDK events\\n     */\\n    setupAppsSdkEventListeners() {\\n      window.addEventListener(\\\"openai:set_globals\\\", () => {\\n        this.config.logger.debug(\\\"[MCPUI-Apps SDK Adapter] Globals updated\\\");\\n        this.sendRenderData();\\n      });\\n    }\\n    /**\\n     * Gather render data from Apps SDK and send to widget\\n     */\\n    sendRenderData(requestMessageId) {\\n      if (!window.openai)\\n        return;\\n      const renderData = {\\n        toolInput: window.openai.toolInput,\\n        toolOutput: window.openai.toolOutput,\\n        widgetState: window.openai.widgetState,\\n        locale: window.openai.locale || \\\"en-US\\\",\\n        theme: window.openai.theme || \\\"light\\\",\\n        displayMode: window.openai.displayMode || \\\"inline\\\",\\n        maxHeight: window.openai.maxHeight\\n      };\\n      this.dispatchMessageToIframe({\\n        type: \\\"ui-lifecycle-iframe-render-data\\\",\\n        messageId: requestMessageId,\\n        payload: { renderData }\\n      });\\n    }\\n    /**\\n     * Send acknowledgment for a message\\n     */\\n    sendAcknowledgment(messageId) {\\n      this.dispatchMessageToIframe({\\n        type: \\\"ui-message-received\\\",\\n        payload: { messageId }\\n      });\\n    }\\n    /**\\n     * Send success response\\n     */\\n    sendSuccessResponse(messageId, response) {\\n      this.dispatchMessageToIframe({\\n        type: \\\"ui-message-response\\\",\\n        payload: { messageId, response }\\n      });\\n    }\\n    /**\\n     * Send error response\\n     */\\n    sendErrorResponse(messageId, error) {\\n      const errorObj = error instanceof Error ? { message: error.message, name: error.name } : { message: String(error) };\\n      this.dispatchMessageToIframe({\\n        type: \\\"ui-message-response\\\",\\n        payload: { messageId, error: errorObj }\\n      });\\n    }\\n    /**\\n     * Dispatch a MessageEvent to the iframe (widget)\\n     * Simulates messages that would normally come from the parent/host\\n     */\\n    dispatchMessageToIframe(data) {\\n      const event = new MessageEvent(\\\"message\\\", {\\n        data,\\n        origin: this.config.hostOrigin,\\n        source: null\\n      });\\n      window.dispatchEvent(event);\\n    }\\n    /**\\n     * Wrap a promise with timeout\\n     */\\n    async withTimeout(promise, requestId) {\\n      return new Promise((resolve, reject) => {\\n        const timeoutId = setTimeout(() => {\\n          this.pendingRequests.delete(requestId);\\n          reject(new Error(`Request timed out after ${this.config.timeout}ms`));\\n        }, this.config.timeout);\\n        this.pendingRequests.set(requestId, {\\n          messageId: requestId,\\n          type: \\\"generic\\\",\\n          resolve,\\n          reject,\\n          timeoutId\\n        });\\n        promise.then((result) => {\\n          clearTimeout(timeoutId);\\n          this.pendingRequests.delete(requestId);\\n          resolve(result);\\n        }).catch((error) => {\\n          clearTimeout(timeoutId);\\n          this.pendingRequests.delete(requestId);\\n          reject(error);\\n        });\\n      });\\n    }\\n    /**\\n     * Generate a unique message ID\\n     */\\n    generateMessageId() {\\n      return `adapter-${Date.now()}-${++this.messageIdCounter}`;\\n    }\\n  };\\n  var adapterInstance = null;\\n  function initAdapter(config) {\\n    if (adapterInstance) {\\n      console.warn(\\\"[MCPUI-Apps SDK Adapter] Adapter already initialized\\\");\\n      return true;\\n    }\\n    adapterInstance = new MCPUIAppsSdkAdapter(config);\\n    return adapterInstance.install();\\n  }\\n  function uninstallAdapter() {\\n    if (adapterInstance) {\\n      adapterInstance.uninstall();\\n      adapterInstance = null;\\n    }\\n  }\\n  if (typeof window !== \\\"undefined\\\") {\\n    const adapterWindow = window;\\n    if (!adapterWindow.MCP_APPSSDK_ADAPTER_NO_AUTO_INSTALL) {\\n      initAdapter();\\n    }\\n  }\\n})();\\n\";\n","/**\n * MCP-UI to Apps SDK Adapter\n *\n * This module enables MCP-UI embeddable widgets to run in Apps SDK environments (e.g., ChatGPT)\n * by intercepting postMessage calls and translating them to the Apps SDK API (e.g., window.openai).\n * \n * The actual implementation is in adapter-runtime.ts (with full TypeScript support).\n * This file imports the pre-bundled version and injects it with configuration.\n */\n\nimport type { AppsSdkAdapterConfig } from './types.js';\n/*\n * The bundler generates both JavaScript and TypeScript variants of the bundled runtime.\n * We import the TypeScript file here so that TypeScript compilation works even when the\n * JavaScript output has not been generated yet (e.g., in tests).\n *\n * Runtime consumers will still resolve to the JavaScript build via package exports.\n */\nimport { ADAPTER_RUNTIME_SCRIPT } from './adapter-runtime.bundled.ts';\n\n/**\n * Returns the complete adapter script as a string that can be injected into HTML.\n * This is the runtime code that will be executed in the browser.\n *\n * @param config - Optional configuration for the adapter\n * @returns A string containing the complete adapter initialization script\n */\nexport function getAppsSdkAdapterScript(config?: AppsSdkAdapterConfig): string {\n  const configJson = config ? JSON.stringify(config) : '{}';\n\n  // Wrap the bundled runtime with configuration and auto-init\n  return `\n<script>\n(function() {\n  'use strict';\n  \n  ${ADAPTER_RUNTIME_SCRIPT}\n  \n  // Override auto-init from runtime and initialize with provided config\n  if (typeof window !== 'undefined') {\n    window.MCP_APPSSDK_ADAPTER_NO_AUTO_INSTALL = true; // Prevent auto-init from bundled code\n    \n    // Initialize with config from server\n    if (typeof initAdapter === 'function') {\n      initAdapter(${configJson});\n    }\n    \n    // Expose functions globally\n    if (typeof window.MCPUIAppsSdkAdapter === 'undefined') {\n      window.MCPUIAppsSdkAdapter = {\n        init: initAdapter,\n        uninstall: uninstallAdapter,\n      };\n    }\n  }\n})();\n</script>\n`.trim();\n}\n","import type { CreateUIResourceOptions, UIResourceProps, AdaptersConfig } from './types.js';\nimport { UI_METADATA_PREFIX } from './types.js';\nimport { getAppsSdkAdapterScript } from './adapters/appssdk/adapter.js';\n\nexport function getAdditionalResourceProps(\n  resourceOptions: Partial<CreateUIResourceOptions>,\n): UIResourceProps {\n  const additionalResourceProps = { ...(resourceOptions.resourceProps ?? {}) } as UIResourceProps;\n\n  // prefix ui specific metadata with the prefix to be recognized by the client\n  if (resourceOptions.uiMetadata || resourceOptions.metadata) {\n    const uiPrefixedMetadata = Object.fromEntries(\n      Object.entries(resourceOptions.uiMetadata ?? {}).map(([key, value]) => [\n        `${UI_METADATA_PREFIX}${key}`,\n        value,\n      ]),\n    );\n    // allow user defined _meta to override ui metadata\n    additionalResourceProps._meta = {\n      ...uiPrefixedMetadata,\n      ...(resourceOptions.metadata ?? {}),\n      ...(additionalResourceProps._meta ?? {}),\n    };\n  }\n\n  return additionalResourceProps;\n}\n\n/**\n * Robustly encodes a UTF-8 string to Base64.\n * Uses Node.js Buffer if available, otherwise TextEncoder and btoa.\n * @param str The string to encode.\n * @returns Base64 encoded string.\n */\nexport function utf8ToBase64(str: string): string {\n  if (typeof Buffer !== 'undefined') {\n    return Buffer.from(str, 'utf-8').toString('base64');\n  } else if (typeof TextEncoder !== 'undefined' && typeof btoa !== 'undefined') {\n    const encoder = new TextEncoder();\n    const uint8Array = encoder.encode(str);\n    // Efficiently convert Uint8Array to binary string, handling large arrays in chunks\n    let binaryString = '';\n    // 8192 is a common chunk size used in JavaScript for performance reasons.\n    // It tends to align well with internal buffer sizes and memory page sizes,\n    // and it's small enough to avoid stack overflow errors with String.fromCharCode.\n    const CHUNK_SIZE = 8192;\n    for (let i = 0; i < uint8Array.length; i += CHUNK_SIZE) {\n      binaryString += String.fromCharCode(...uint8Array.slice(i, i + CHUNK_SIZE));\n    }\n    return btoa(binaryString);\n  } else {\n    console.warn(\n      'MCP-UI SDK: Buffer API and TextEncoder/btoa not available. Base64 encoding might not be UTF-8 safe.',\n    );\n    try {\n      return btoa(str);\n    } catch (e) {\n      throw new Error(\n        'MCP-UI SDK: Suitable UTF-8 to Base64 encoding method not found, and fallback btoa failed.',\n      );\n    }\n  }\n}\n\n/**\n * Determines the MIME type based on enabled adapters.\n *\n * @param adaptersConfig - Configuration for all adapters\n * @returns The MIME type to use, or undefined if no adapters are enabled\n */\nexport function getAdapterMimeType(adaptersConfig?: AdaptersConfig): string | undefined {\n  if (!adaptersConfig) {\n    return undefined;\n  }\n\n  // Apps SDK adapter\n  if (adaptersConfig.appsSdk?.enabled) {\n    return adaptersConfig.appsSdk.mimeType ?? 'text/html+skybridge';\n  }\n\n  // Future adapters can be added here by checking for their config and returning their mime type.\n\n  return undefined;\n}\n\n/**\n * Wraps HTML content with enabled adapter scripts.\n * This allows the HTML to communicate with different platform environments.\n *\n * @param htmlContent - The HTML content to wrap\n * @param adaptersConfig - Configuration for all adapters\n * @returns The wrapped HTML content with adapter scripts injected\n */\nexport function wrapHtmlWithAdapters(\n  htmlContent: string,\n  adaptersConfig?: AdaptersConfig,\n): string {\n  if (!adaptersConfig) {\n    return htmlContent;\n  }\n\n  const adapterScripts: string[] = [];\n\n  // Apps SDK adapter\n  if (adaptersConfig.appsSdk?.enabled) {\n    const script = getAppsSdkAdapterScript(adaptersConfig.appsSdk.config);\n    adapterScripts.push(script);\n  }\n\n  // Future adapters can be added here by checking for their config and pushing their scripts to adapterScripts.\n\n  // If no adapters are enabled, return original HTML\n  if (adapterScripts.length === 0) {\n    return htmlContent;\n  }\n\n  // Combine all adapter scripts\n  const combinedScripts = adapterScripts.join('\\n');\n\n  let finalHtmlContent: string;\n\n  // If the HTML already has a <head> tag, inject the adapter scripts into it\n  if (htmlContent.includes('<head>')) {\n    finalHtmlContent = htmlContent.replace('<head>', `<head>\\n${combinedScripts}`);\n  }\n  // If the HTML has an <html> tag but no <head>, add a <head> with the adapter scripts\n  else if (htmlContent.includes('<html>')) {\n    finalHtmlContent = htmlContent.replace('<html>', `<html>\\n<head>\\n${combinedScripts}\\n</head>`);\n  }\n  // Otherwise, prepend the adapter scripts before the content\n  else {\n    finalHtmlContent = `${combinedScripts}\\n${htmlContent}`;\n  }\n\n  return finalHtmlContent;\n}\n","import {\n  Base64BlobContent,\n  CreateUIResourceOptions,\n  HTMLTextContent,\n  MimeType,\n  UIActionResult,\n  UIActionResultLink,\n  UIActionResultNotification,\n  UIActionResultPrompt,\n  UIActionResultIntent,\n  UIActionResultToolCall,\n} from './types.js';\nimport { getAdditionalResourceProps, utf8ToBase64, wrapHtmlWithAdapters, getAdapterMimeType } from './utils.js';\n\nexport type UIResource = {\n  type: 'resource';\n  resource: HTMLTextContent | Base64BlobContent;\n  annotations?: Record<string, unknown>;\n  _meta?: Record<string, unknown>;\n};\n\n/**\n * Creates a UIResource.\n * This is the object that should be included in the 'content' array of a toolResult.\n * @param options Configuration for the interactive resource.\n * @returns a UIResource.\n */\nexport function createUIResource(options: CreateUIResourceOptions): UIResource {\n  let actualContentString: string;\n  let mimeType: MimeType;\n\n  if (options.content.type === 'rawHtml') {\n    if (!options.uri.startsWith('ui://')) {\n      throw new Error(\"MCP-UI SDK: URI must start with 'ui://' when content.type is 'rawHtml'.\");\n    }\n    actualContentString = options.content.htmlString;\n    if (typeof actualContentString !== 'string') {\n      throw new Error(\n        \"MCP-UI SDK: content.htmlString must be provided as a string when content.type is 'rawHtml'.\",\n      );\n    }\n\n    // Wrap with adapters if any are enabled\n    if (options.adapters) {\n      actualContentString = wrapHtmlWithAdapters(actualContentString, options.adapters);\n      // Use adapter's mime type if provided, otherwise fall back to 'text/html'\n      mimeType = (getAdapterMimeType(options.adapters) as MimeType) ?? 'text/html';\n    } else {\n      mimeType = 'text/html';\n    }\n  } else if (options.content.type === 'externalUrl') {\n    if (!options.uri.startsWith('ui://')) {\n      throw new Error(\n        \"MCP-UI SDK: URI must start with 'ui://' when content.type is 'externalUrl'.\",\n      );\n    }\n    actualContentString = options.content.iframeUrl;\n    if (typeof actualContentString !== 'string') {\n      throw new Error(\n        \"MCP-UI SDK: content.iframeUrl must be provided as a string when content.type is 'externalUrl'.\",\n      );\n    }\n    mimeType = 'text/uri-list';\n  } else if (options.content.type === 'remoteDom') {\n    if (!options.uri.startsWith('ui://')) {\n      throw new Error(\"MCP-UI SDK: URI must start with 'ui://' when content.type is 'remoteDom'.\");\n    }\n    actualContentString = options.content.script;\n    if (typeof actualContentString !== 'string') {\n      throw new Error(\n        \"MCP-UI SDK: content.script must be provided as a string when content.type is 'remoteDom'.\",\n      );\n    }\n    mimeType = `application/vnd.mcp-ui.remote-dom+javascript; framework=${options.content.framework}`;\n  } else {\n    // This case should ideally be prevented by TypeScript's discriminated union checks\n    const exhaustiveCheckContent: never = options.content;\n    throw new Error(`MCP-UI SDK: Invalid content.type specified: ${exhaustiveCheckContent}`);\n  }\n\n  let resource: UIResource['resource'];\n\n  switch (options.encoding) {\n    case 'text':\n      resource = {\n        uri: options.uri,\n        mimeType: mimeType as MimeType,\n        text: actualContentString,\n        ...getAdditionalResourceProps(options),\n      };\n      break;\n    case 'blob':\n      resource = {\n        uri: options.uri,\n        mimeType: mimeType as MimeType,\n        blob: utf8ToBase64(actualContentString),\n        ...getAdditionalResourceProps(options),\n      };\n      break;\n    default: {\n      const exhaustiveCheck: never = options.encoding;\n      throw new Error(`MCP-UI SDK: Invalid encoding type: ${exhaustiveCheck}`);\n    }\n  }\n\n  return {\n    type: 'resource',\n    resource: resource,\n    ...(options.embeddedResourceProps ?? {}),\n  };\n}\n\nexport type {\n  CreateUIResourceOptions,\n  ResourceContentPayload,\n  UIActionResult,\n  AdaptersConfig,\n  AppsSdkAdapterOptions,\n} from './types.js';\n\n// Export adapters\nexport { wrapHtmlWithAdapters, getAdapterMimeType } from './utils.js';\nexport * from './adapters/index.js';\n\nexport function postUIActionResult(result: UIActionResult): void {\n  if (window.parent) {\n    window.parent.postMessage(result, '*');\n  }\n}\n\nexport const InternalMessageType = {\n  UI_MESSAGE_RECEIVED: 'ui-message-received',\n  UI_MESSAGE_RESPONSE: 'ui-message-response',\n\n  UI_SIZE_CHANGE: 'ui-size-change',\n\n  UI_LIFECYCLE_IFRAME_READY: 'ui-lifecycle-iframe-ready',\n  UI_LIFECYCLE_IFRAME_RENDER_DATA: 'ui-lifecycle-iframe-render-data',\n};\n\nexport const ReservedUrlParams = {\n  WAIT_FOR_RENDER_DATA: 'waitForRenderData',\n} as const;\n\nexport function uiActionResultToolCall(\n  toolName: string,\n  params: Record<string, unknown>,\n): UIActionResultToolCall {\n  return {\n    type: 'tool',\n    payload: {\n      toolName,\n      params,\n    },\n  };\n}\n\nexport function uiActionResultPrompt(prompt: string): UIActionResultPrompt {\n  return {\n    type: 'prompt',\n    payload: {\n      prompt,\n    },\n  };\n}\n\nexport function uiActionResultLink(url: string): UIActionResultLink {\n  return {\n    type: 'link',\n    payload: {\n      url,\n    },\n  };\n}\n\nexport function uiActionResultIntent(\n  intent: string,\n  params: Record<string, unknown>,\n): UIActionResultIntent {\n  return {\n    type: 'intent',\n    payload: {\n      intent,\n      params,\n    },\n  };\n}\n\nexport function uiActionResultNotification(message: string): UIActionResultNotification {\n  return {\n    type: 'notify',\n    payload: {\n      message,\n    },\n  };\n}\n"],"names":["UI_METADATA_PREFIX","ADAPTER_RUNTIME_SCRIPT","getAppsSdkAdapterScript","config","configJson","getAdditionalResourceProps","resourceOptions","additionalResourceProps","uiPrefixedMetadata","key","value","utf8ToBase64","str","uint8Array","binaryString","CHUNK_SIZE","i","getAdapterMimeType","adaptersConfig","wrapHtmlWithAdapters","htmlContent","adapterScripts","script","combinedScripts","finalHtmlContent","createUIResource","options","actualContentString","mimeType","exhaustiveCheckContent","resource","exhaustiveCheck","postUIActionResult","result","InternalMessageType","ReservedUrlParams","uiActionResultToolCall","toolName","params","uiActionResultPrompt","prompt","uiActionResultLink","url","uiActionResultIntent","intent","uiActionResultNotification","message"],"mappings":"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"}