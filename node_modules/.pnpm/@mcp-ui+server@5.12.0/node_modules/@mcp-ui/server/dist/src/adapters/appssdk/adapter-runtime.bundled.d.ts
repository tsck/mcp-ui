export declare const ADAPTER_RUNTIME_SCRIPT = "\"use strict\";\n(() => {\n  var __defProp = Object.defineProperty;\n  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\n  var __publicField = (obj, key, value) => {\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n  };\n\n  // src/adapters/appssdk/adapter-runtime.ts\n  var MCPUIAppsSdkAdapter = class {\n    constructor(config = {}) {\n      __publicField(this, \"config\");\n      __publicField(this, \"pendingRequests\", /* @__PURE__ */ new Map());\n      __publicField(this, \"messageIdCounter\", 0);\n      __publicField(this, \"originalPostMessage\", null);\n      this.config = {\n        logger: config.logger || console,\n        hostOrigin: config.hostOrigin || window.location.origin,\n        timeout: config.timeout || 3e4,\n        intentHandling: config.intentHandling || \"prompt\"\n      };\n    }\n    /**\n     * Initialize the adapter and monkey-patch postMessage if Apps SDK is present\n     */\n    install() {\n      if (!window.openai) {\n        this.config.logger.warn(\"[MCPUI-Apps SDK Adapter] window.openai not detected. Adapter will not activate.\");\n        return false;\n      }\n      this.config.logger.log(\"[MCPUI-Apps SDK Adapter] Initializing adapter...\");\n      this.patchPostMessage();\n      this.setupAppsSdkEventListeners();\n      this.sendRenderData();\n      this.config.logger.log(\"[MCPUI-Apps SDK Adapter] Adapter initialized successfully\");\n      return true;\n    }\n    /**\n     * Clean up pending requests and restore original postMessage\n     */\n    uninstall() {\n      for (const request of this.pendingRequests.values()) {\n        clearTimeout(request.timeoutId);\n        request.reject(new Error(\"Adapter uninstalled\"));\n      }\n      this.pendingRequests.clear();\n      if (this.originalPostMessage) {\n        try {\n          const parentWindow = window.parent ?? null;\n          if (parentWindow) {\n            parentWindow.postMessage = this.originalPostMessage;\n          }\n          this.config.logger.log(\"[MCPUI-Apps SDK Adapter] Restored original parent.postMessage\");\n        } catch (error) {\n          this.config.logger.error(\"[MCPUI-Apps SDK Adapter] Failed to restore original postMessage:\", error);\n        }\n      }\n      this.config.logger.log(\"[MCPUI-Apps SDK Adapter] Adapter uninstalled\");\n    }\n    /**\n     * Monkey-patch parent.postMessage to intercept MCP-UI messages\n     * and forward non-MCP-UI messages to the original postMessage\n     */\n    patchPostMessage() {\n      const parentWindow = window.parent ?? null;\n      this.originalPostMessage = parentWindow?.postMessage?.bind(parentWindow) ?? null;\n      if (!this.originalPostMessage) {\n        this.config.logger.debug(\"[MCPUI-Apps SDK Adapter] parent.postMessage does not exist, installing shim only\");\n      } else {\n        this.config.logger.debug(\"[MCPUI-Apps SDK Adapter] Monkey-patching parent.postMessage to intercept MCP-UI messages\");\n      }\n      const postMessageInterceptor = (message, targetOriginOrOptions, transfer) => {\n        if (this.isMCPUIMessage(message)) {\n          const mcpMessage = message;\n          this.config.logger.debug(\"[MCPUI-Apps SDK Adapter] Intercepted MCP-UI message:\", mcpMessage.type);\n          this.handleMCPUIMessage(mcpMessage);\n        } else {\n          if (this.originalPostMessage) {\n            this.config.logger.debug(\"[MCPUI-Apps SDK Adapter] Forwarding non-MCP-UI message to original postMessage\");\n            if (typeof targetOriginOrOptions === \"string\" || targetOriginOrOptions === void 0) {\n              const targetOrigin = targetOriginOrOptions ?? \"*\";\n              this.originalPostMessage(message, targetOrigin, transfer);\n            } else {\n              this.originalPostMessage(message, targetOriginOrOptions);\n            }\n          } else {\n            this.config.logger.warn(\"[MCPUI-Apps SDK Adapter] No original postMessage to forward to, ignoring message:\", message);\n          }\n        }\n      };\n      try {\n        if (parentWindow) {\n          parentWindow.postMessage = postMessageInterceptor;\n        }\n      } catch (error) {\n        this.config.logger.error(\"[MCPUI-Apps SDK Adapter] Failed to monkey-patch parent.postMessage:\", error);\n      }\n    }\n    /**\n     * Check if a message is an MCP-UI protocol message\n     */\n    isMCPUIMessage(message) {\n      if (!message || typeof message !== \"object\") {\n        return false;\n      }\n      const msg = message;\n      return typeof msg.type === \"string\" && (msg.type.startsWith(\"ui-\") || [\"tool\", \"prompt\", \"intent\", \"notify\", \"link\"].includes(msg.type));\n    }\n    /**\n     * Handle incoming MCP-UI messages and translate to Apps SDK actions\n     */\n    async handleMCPUIMessage(message) {\n      this.config.logger.debug(\"[MCPUI-Apps SDK Adapter] Received MCPUI message:\", message.type);\n      try {\n        switch (message.type) {\n          case \"tool\":\n            await this.handleToolMessage(message);\n            break;\n          case \"prompt\":\n            await this.handlePromptMessage(message);\n            break;\n          case \"intent\":\n            await this.handleIntentMessage(message);\n            break;\n          case \"notify\":\n            await this.handleNotifyMessage(message);\n            break;\n          case \"link\":\n            await this.handleLinkMessage(message);\n            break;\n          case \"ui-lifecycle-iframe-ready\":\n            this.sendRenderData();\n            break;\n          case \"ui-request-render-data\":\n            this.sendRenderData(message.messageId);\n            break;\n          case \"ui-size-change\":\n            this.handleSizeChange(message);\n            break;\n          case \"ui-request-data\":\n            this.handleRequestData(message);\n            break;\n          default:\n            this.config.logger.warn(\"[MCPUI-Apps SDK Adapter] Unknown message type:\", message.type);\n        }\n      } catch (error) {\n        this.config.logger.error(\"[MCPUI-Apps SDK Adapter] Error handling message:\", error);\n        if (message.messageId) {\n          this.sendErrorResponse(message.messageId, error);\n        }\n      }\n    }\n    /**\n     * Handle 'tool' message - call Apps SDK tool\n     */\n    async handleToolMessage(message) {\n      if (message.type !== \"tool\")\n        return;\n      const { toolName, params } = message.payload;\n      const messageId = message.messageId || this.generateMessageId();\n      this.sendAcknowledgment(messageId);\n      try {\n        if (!window.openai?.callTool) {\n          throw new Error(\"Tool calling is not supported in this environment\");\n        }\n        const result = await this.withTimeout(\n          window.openai.callTool(toolName, params),\n          messageId\n        );\n        this.sendSuccessResponse(messageId, result);\n      } catch (error) {\n        this.sendErrorResponse(messageId, error);\n      }\n    }\n    /**\n     * Handle 'prompt' message - send followup turn\n     */\n    async handlePromptMessage(message) {\n      if (message.type !== \"prompt\")\n        return;\n      const prompt = message.payload.prompt;\n      const messageId = message.messageId || this.generateMessageId();\n      this.sendAcknowledgment(messageId);\n      try {\n        if (!window.openai?.sendFollowUpMessage) {\n          throw new Error(\"Followup turns are not supported in this environment\");\n        }\n        await this.withTimeout(\n          window.openai.sendFollowUpMessage({ prompt }),\n          messageId\n        );\n        this.sendSuccessResponse(messageId, { success: true });\n      } catch (error) {\n        this.sendErrorResponse(messageId, error);\n      }\n    }\n    /**\n     * Handle 'intent' message - convert to prompt or ignore based on config\n     */\n    async handleIntentMessage(message) {\n      if (message.type !== \"intent\")\n        return;\n      const messageId = message.messageId || this.generateMessageId();\n      this.sendAcknowledgment(messageId);\n      if (this.config.intentHandling === \"ignore\") {\n        this.config.logger.log(\"[MCPUI-Apps SDK Adapter] Intent ignored:\", message.payload.intent);\n        this.sendSuccessResponse(messageId, { ignored: true });\n        return;\n      }\n      const { intent, params } = message.payload;\n      const prompt = `${intent}${params ? `: ${JSON.stringify(params)}` : \"\"}`;\n      try {\n        if (!window.openai?.sendFollowUpMessage) {\n          throw new Error(\"Followup turns are not supported in this environment\");\n        }\n        await this.withTimeout(\n          window.openai.sendFollowUpMessage({ prompt }),\n          messageId\n        );\n        this.sendSuccessResponse(messageId, { success: true });\n      } catch (error) {\n        this.sendErrorResponse(messageId, error);\n      }\n    }\n    /**\n     * Handle 'notify' message - log only\n     */\n    async handleNotifyMessage(message) {\n      if (message.type !== \"notify\")\n        return;\n      const messageId = message.messageId || this.generateMessageId();\n      this.config.logger.log(\"[MCPUI-Apps SDK Adapter] Notification:\", message.payload.message);\n      this.sendAcknowledgment(messageId);\n      this.sendSuccessResponse(messageId, { acknowledged: true });\n    }\n    /**\n     * Handle 'link' message - not supported in Apps SDK environments\n     */\n    async handleLinkMessage(message) {\n      if (message.type !== \"link\")\n        return;\n      const messageId = message.messageId || this.generateMessageId();\n      this.sendAcknowledgment(messageId);\n      this.sendErrorResponse(messageId, new Error(\"Navigation is not supported in Apps SDK environment\"));\n    }\n    /**\n     * Handle size change - no-op in Apps SDK environment\n     */\n    handleSizeChange(message) {\n      this.config.logger.debug(\"[MCPUI-Apps SDK Adapter] Size change requested (no-op in Apps SDK):\", message.payload);\n    }\n    /**\n     * Handle generic data request\n     */\n    handleRequestData(message) {\n      const messageId = message.messageId || this.generateMessageId();\n      this.sendAcknowledgment(messageId);\n      this.sendErrorResponse(messageId, new Error(\"Generic data requests not yet implemented\"));\n    }\n    /**\n     * Setup listeners for Apps SDK events\n     */\n    setupAppsSdkEventListeners() {\n      window.addEventListener(\"openai:set_globals\", () => {\n        this.config.logger.debug(\"[MCPUI-Apps SDK Adapter] Globals updated\");\n        this.sendRenderData();\n      });\n    }\n    /**\n     * Gather render data from Apps SDK and send to widget\n     */\n    sendRenderData(requestMessageId) {\n      if (!window.openai)\n        return;\n      const renderData = {\n        toolInput: window.openai.toolInput,\n        toolOutput: window.openai.toolOutput,\n        widgetState: window.openai.widgetState,\n        locale: window.openai.locale || \"en-US\",\n        theme: window.openai.theme || \"light\",\n        displayMode: window.openai.displayMode || \"inline\",\n        maxHeight: window.openai.maxHeight\n      };\n      this.dispatchMessageToIframe({\n        type: \"ui-lifecycle-iframe-render-data\",\n        messageId: requestMessageId,\n        payload: { renderData }\n      });\n    }\n    /**\n     * Send acknowledgment for a message\n     */\n    sendAcknowledgment(messageId) {\n      this.dispatchMessageToIframe({\n        type: \"ui-message-received\",\n        payload: { messageId }\n      });\n    }\n    /**\n     * Send success response\n     */\n    sendSuccessResponse(messageId, response) {\n      this.dispatchMessageToIframe({\n        type: \"ui-message-response\",\n        payload: { messageId, response }\n      });\n    }\n    /**\n     * Send error response\n     */\n    sendErrorResponse(messageId, error) {\n      const errorObj = error instanceof Error ? { message: error.message, name: error.name } : { message: String(error) };\n      this.dispatchMessageToIframe({\n        type: \"ui-message-response\",\n        payload: { messageId, error: errorObj }\n      });\n    }\n    /**\n     * Dispatch a MessageEvent to the iframe (widget)\n     * Simulates messages that would normally come from the parent/host\n     */\n    dispatchMessageToIframe(data) {\n      const event = new MessageEvent(\"message\", {\n        data,\n        origin: this.config.hostOrigin,\n        source: null\n      });\n      window.dispatchEvent(event);\n    }\n    /**\n     * Wrap a promise with timeout\n     */\n    async withTimeout(promise, requestId) {\n      return new Promise((resolve, reject) => {\n        const timeoutId = setTimeout(() => {\n          this.pendingRequests.delete(requestId);\n          reject(new Error(`Request timed out after ${this.config.timeout}ms`));\n        }, this.config.timeout);\n        this.pendingRequests.set(requestId, {\n          messageId: requestId,\n          type: \"generic\",\n          resolve,\n          reject,\n          timeoutId\n        });\n        promise.then((result) => {\n          clearTimeout(timeoutId);\n          this.pendingRequests.delete(requestId);\n          resolve(result);\n        }).catch((error) => {\n          clearTimeout(timeoutId);\n          this.pendingRequests.delete(requestId);\n          reject(error);\n        });\n      });\n    }\n    /**\n     * Generate a unique message ID\n     */\n    generateMessageId() {\n      return `adapter-${Date.now()}-${++this.messageIdCounter}`;\n    }\n  };\n  var adapterInstance = null;\n  function initAdapter(config) {\n    if (adapterInstance) {\n      console.warn(\"[MCPUI-Apps SDK Adapter] Adapter already initialized\");\n      return true;\n    }\n    adapterInstance = new MCPUIAppsSdkAdapter(config);\n    return adapterInstance.install();\n  }\n  function uninstallAdapter() {\n    if (adapterInstance) {\n      adapterInstance.uninstall();\n      adapterInstance = null;\n    }\n  }\n  if (typeof window !== \"undefined\") {\n    const adapterWindow = window;\n    if (!adapterWindow.MCP_APPSSDK_ADAPTER_NO_AUTO_INSTALL) {\n      initAdapter();\n    }\n  }\n})();\n";
//# sourceMappingURL=adapter-runtime.bundled.d.ts.map