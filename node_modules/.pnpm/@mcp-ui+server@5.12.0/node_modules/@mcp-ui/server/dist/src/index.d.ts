import { Base64BlobContent, CreateUIResourceOptions, HTMLTextContent, UIActionResult, UIActionResultLink, UIActionResultNotification, UIActionResultPrompt, UIActionResultIntent, UIActionResultToolCall } from './types.js';

export type UIResource = {
    type: 'resource';
    resource: HTMLTextContent | Base64BlobContent;
    annotations?: Record<string, unknown>;
    _meta?: Record<string, unknown>;
};
/**
 * Creates a UIResource.
 * This is the object that should be included in the 'content' array of a toolResult.
 * @param options Configuration for the interactive resource.
 * @returns a UIResource.
 */
export declare function createUIResource(options: CreateUIResourceOptions): UIResource;
export type { CreateUIResourceOptions, ResourceContentPayload, UIActionResult, AdaptersConfig, AppsSdkAdapterOptions, } from './types.js';
export { wrapHtmlWithAdapters, getAdapterMimeType } from './utils.js';
export * from './adapters/index.js';
export declare function postUIActionResult(result: UIActionResult): void;
export declare const InternalMessageType: {
    UI_MESSAGE_RECEIVED: string;
    UI_MESSAGE_RESPONSE: string;
    UI_SIZE_CHANGE: string;
    UI_LIFECYCLE_IFRAME_READY: string;
    UI_LIFECYCLE_IFRAME_RENDER_DATA: string;
};
export declare const ReservedUrlParams: {
    readonly WAIT_FOR_RENDER_DATA: "waitForRenderData";
};
export declare function uiActionResultToolCall(toolName: string, params: Record<string, unknown>): UIActionResultToolCall;
export declare function uiActionResultPrompt(prompt: string): UIActionResultPrompt;
export declare function uiActionResultLink(url: string): UIActionResultLink;
export declare function uiActionResultIntent(intent: string, params: Record<string, unknown>): UIActionResultIntent;
export declare function uiActionResultNotification(message: string): UIActionResultNotification;
//# sourceMappingURL=index.d.ts.map