{"version":3,"file":"index.js","sources":["../../src/Polymorphic/constants.ts","../../src/Polymorphic/Polymorphic.hooks.tsx","../../src/Polymorphic/Polymorph.tsx","../../src/InferredPolymorphic/hooks/useInferredPolymorphicProps.ts","../../src/InferredPolymorphic/hooks/useInferredPolymorphic.ts","../../src/InferredPolymorphic/InferredPolymorphic.ts","../../src/Polymorphic/Polymorphic.ts","../../src/utils/hasAnchorProps/hasAnchorProps.ts","../../src/InferredPolymorphic/hooks/useInferredPolymorphicComponent.ts","../../src/InferredPolymorphic/hooks/useStrictInferredPolymorphicProps.ts"],"sourcesContent":["export const FALLBACK = 'div';\n","import React from 'react';\n\nimport { PolymorphicAs, PolymorphicRef } from './Polymorphic.types';\n\n/**\n * A wrapper around `React.useRef`\n * that provides an accurately typed Ref object\n */\nexport const usePolymorphicRef = <E extends PolymorphicAs>(_?: E) => {\n  // By accepting a prop with a generic type, we can set the type E using JS vars.\n  // i.e. instead of calling `usePolymorphicRef<'div'>()`\n  // we can instead call `usePolymorphicRef('div')`\n\n  return React.useRef<\n    | (E extends keyof HTMLElementTagNameMap\n        ? HTMLElementTagNameMap[E]\n        : unknown)\n    | null\n  >(null);\n};\n\n/**\n * A hook that computes & returns the polymorphic ReactElement based on the `as` prop\n *\n * For client-side components, prefer using `usePolymorphic`, which returns a typed `ref` as well as the polymorphic component\n */\nexport function usePolymorphicComponent<T extends PolymorphicAs>(\n  as?: T,\n): PolymorphicAs {\n  return as || 'div';\n}\n\n/**\n * A hook that returns an accurately typed polymorphic `Component` and `ref`,\n * given an `as` prop\n */\nexport function usePolymorphic<T extends PolymorphicAs>(\n  as?: T,\n): {\n  Component: PolymorphicAs;\n  ref: PolymorphicRef<T>;\n} {\n  const Component = usePolymorphicComponent(as);\n  const ref = usePolymorphicRef(as);\n\n  return {\n    Component,\n    ref,\n  };\n}\n","import React from 'react';\n\nimport { usePolymorphic } from './Polymorphic.hooks';\nimport {\n  PolymorphicAs,\n  PolymorphicComponentType,\n  PolymorphicPropsWithRef,\n  PolymorphicRef,\n} from './Polymorphic.types';\n\n/**\n * Base polymorphic component\n */\nexport const BasePolymorph = <T extends PolymorphicAs = 'div'>(\n  { as, children, ...rest }: PolymorphicPropsWithRef<T>,\n  ref: PolymorphicRef<T>,\n) => {\n  const { Component } = usePolymorphic(as);\n\n  return (\n    <Component {...rest} ref={ref}>\n      {children}\n    </Component>\n  );\n};\n\n/**\n * Polymorphic component that supports forwarded refs\n *\n * With the `as` prop, Polymorphic can dynamically render\n * as any HTML element or React Component.\n *\n * If the logic defining the `as` prop is defined internally within your component,\n * use this standalone `Polymorph` component.\n *\n * However: If you want to expose `as` as a prop of your component,\n * prefer the `{@link Polymorphic}` factory function and related hooks.\n */\nexport const Polymorph: PolymorphicComponentType =\n  React.forwardRef(BasePolymorph);\nPolymorph.displayName = 'Polymorph';\n","import { ComponentPropsWithoutRef } from 'react';\n\nimport { consoleOnce } from '@leafygreen-ui/lib';\n\nimport { FALLBACK, PolymorphicAs } from '../../Polymorphic';\n\n/**\n * Returns a loosely typed prop object,\n * with a defined `as` value,\n * a potentially defined `href` prop,\n * and the rest of the provided props,\n * typed as a union of attributes on all PolymorphicAs value\n *\n * For client-side components, prefer using `useInferredPolymorphic`,\n * which also returns a typed `ref`\n */\nexport function useInferredPolymorphicProps<\n  T extends PolymorphicAs,\n  R extends { [key: string]: any },\n  D extends PolymorphicAs,\n>(\n  asProp?: T,\n  rest?: R,\n  defaultAs?: D,\n): {\n  /** The element or component to render as */\n  as: PolymorphicAs;\n  /** The URL that the hyperlink points to */\n  href?: string;\n} & ComponentPropsWithoutRef<PolymorphicAs> {\n  const href = rest?.href;\n\n  // If `as` is explicitly \"a\", we return anchor props, with explicit href\n  if (asProp && asProp === 'a') {\n    if (!href || typeof href !== 'string') {\n      consoleOnce.error(\n        'LG Polymorphic error',\n        'Component received `as=\"a\"`, but did not receive an `href` prop',\n      );\n    }\n\n    return {\n      as: 'a' as PolymorphicAs,\n      href: typeof href === 'string' ? href : undefined,\n      ...rest,\n    };\n  }\n\n  // If `as` is otherwise defined, we return that element's component props\n  if (asProp) {\n    return {\n      as: asProp,\n      href: href || undefined,\n      ...rest,\n    };\n  }\n\n  // If `as` not defined, but rest.href is a string, return explicit anchor props\n  if (href && typeof href === 'string') {\n    return {\n      as: 'a',\n      href,\n      ...rest,\n    };\n  }\n\n  // If `as` is undefined, we return the default argument's props\n  return {\n    as: defaultAs || FALLBACK,\n    ...rest,\n  };\n}\n","import { PolymorphicAs, usePolymorphicRef } from '../../Polymorphic';\n\nimport { useInferredPolymorphicProps } from './useInferredPolymorphicProps';\n\n/**\n * A hook that returns a Component and `ref` based on the `as` prop passed in,\n * and any other props provided.\n *\n * The returned `Component` can be inferred by the additional props passed in.\n * (i.e. if no `as` prop is provided, but an `href` prop is defined, then `as` will\n * be inferred to be `a`\n */\nexport function useInferredPolymorphic<\n  T extends PolymorphicAs,\n  R extends { [key: string]: any },\n  D extends PolymorphicAs,\n>(asProp?: T, restArg?: R, defaultAs?: D) {\n  const { as, ...rest } = useInferredPolymorphicProps(\n    asProp,\n    restArg,\n    defaultAs,\n  );\n\n  const ref = usePolymorphicRef(as);\n\n  return {\n    Component: as,\n    as,\n    ref,\n    rest,\n  };\n}\n","import React from 'react';\n\nimport { PolymorphicAs } from '../Polymorphic';\n\nimport {\n  InferredPolymorphicComponentType,\n  InferredPolymorphicRenderFunction,\n} from './InferredPolymorphic.types';\n\n/**\n * Inferred copy of the {@link Polymorphic} factory function.\n * Returns a polymorphic component that can infer the `as` prop as anchor based on a provided `href`\n *\n * For more, see {@link https://github.com/mongodb/leafygreen-ui/blob/main/packages/polymorphic/README.md | README.md}\n */\nexport const InferredPolymorphic = <\n  TComponentProps extends object = {},\n  TDefaultAs extends PolymorphicAs = PolymorphicAs,\n>(\n  render: InferredPolymorphicRenderFunction<TComponentProps, TDefaultAs>,\n  displayName?: string,\n): InferredPolymorphicComponentType<TComponentProps, TDefaultAs> => {\n  let PolyComponent: InferredPolymorphicComponentType<\n    TComponentProps,\n    TDefaultAs\n  >;\n\n  if (render.length === 1) {\n    PolyComponent = render;\n  } else {\n    type PropTypes = Parameters<typeof render>[0];\n    type RefType = Parameters<typeof render>[1];\n    /// @ts-expect-error - types too complex. Return type is still computed correctly\n    PolyComponent = React.forwardRef<RefType, PropTypes>(render);\n  }\n\n  PolyComponent.displayName =\n    displayName ?? render.displayName ?? 'PolymorphicComponent';\n  return PolyComponent;\n};\n","import { forwardRef } from 'react';\n\nimport {\n  PolymorphicAs,\n  PolymorphicComponentType,\n  PolymorphicRenderFunction,\n} from './Polymorphic.types';\n\n/**\n * Factory function that returns a polymorphic component.\n *\n * If you want to expose `as` as a prop of your component,\n * use this `Polymorphic` factory function and related hooks.\n *\n * However, if the logic defining the `as` prop is defined internally within your component,\n * use the standalone `Polymorph` component.\n *\n * For more, see {@link https://github.com/mongodb/leafygreen-ui/blob/main/packages/polymorphic/README.md | README.md}\n */\nexport const Polymorphic = <\n  XP extends object = {},\n  DefaultAs extends PolymorphicAs = PolymorphicAs,\n>(\n  render: PolymorphicRenderFunction<XP, DefaultAs>,\n  displayName?: string,\n): PolymorphicComponentType<XP, DefaultAs> => {\n  // Here we only know the additional props,\n  // but we don't know what `as` is, or what props to inherit\n  // (i.e. we don't know if `as=\"button\"`, and if `type` is a valid prop)\n\n  // If no `ref` arg was passed in, we use the plain render function\n  const PolyComponent: PolymorphicComponentType<XP, DefaultAs> =\n    render.length === 1\n      ? render\n      : // @ts-ignore React17 In TS<5.0 this is `ReactElement` but in 5+ it's `ReactNode`\n        (forwardRef(render) as PolymorphicComponentType<XP, DefaultAs>);\n\n  PolyComponent.displayName =\n    displayName ?? render.displayName ?? 'PolymorphicComponent';\n  return PolyComponent;\n};\n","import has from 'lodash/has';\n\nimport { PartialRequired } from '@leafygreen-ui/lib';\n\nimport { PolymorphicAs, PolymorphicProps } from '../../Polymorphic';\n\n/**\n * A type guard asserting that the provided `as` prop and rest props\n * satisfy the intrinsic attributes of an anchor (`<a>`) element\n */\nexport const hasAnchorProps = <TProps extends any>(\n  as?: PolymorphicAs,\n  props?: TProps,\n): props is PartialRequired<PolymorphicProps<'a'>, 'href'> & TProps => {\n  return as === 'a' && has(props, 'href');\n};\n","import { PolymorphicAs } from '../../Polymorphic';\n\n/**\n * A hook that computes & returns the inferred polymorphic component based on the `as` prop, and any other props passed in.\n *\n * For client-side components, prefer using `useInferredPolymorphic`,\n * which also returns a typed `ref`\n */\nexport function useInferredPolymorphicComponent<\n  T extends PolymorphicAs,\n  R extends { [key: string]: any },\n  D extends PolymorphicAs,\n>(as?: T, rest?: R, defaultAs?: D): PolymorphicAs {\n  return as\n    ? as\n    : typeof rest?.href === 'string'\n    ? 'a'\n    : defaultAs ?? ('div' as PolymorphicAs);\n}\n","import { ComponentPropsWithoutRef } from 'react';\n\nimport { consoleOnce } from '@leafygreen-ui/lib';\n\nimport { FALLBACK, PolymorphicAs } from '../../Polymorphic';\n\n/**\n *\n * Returns a strongly-typed props object including the `as` prop,\n *\n * WARING - using this function unnecessarily can cause TypeScript\n * to slow down dramatically.\n *\n * In most cases simply calling `useInferredPolymorphic`,\n * and leveraging appropriate type guards will be sufficient\n *\n * - If `as` is explicitly \"a\", we return anchor props, with explicit href.\n * - If `as` is something else, but rest.href is a string, return explicit anchor props.\n * - If `as` is otherwise defined, we return that element's component props.\n * - If `as` is undefined, we return the default argument's props.\n * - If default is undefined, use the fallback as 'div'\n *\n */\n// If `as` is explicitly \"a\", we return anchor props, with explicit href\nexport function useStrictInferredPolymorphicProps<\n  TAs extends 'a',\n  TRestRest extends Record<string, any>,\n  TDefault extends PolymorphicAs = typeof FALLBACK,\n>(\n  as: TAs,\n  rest: TRestRest,\n  defaultAs?: TDefault,\n): { as: 'a'; href: string } & ComponentPropsWithoutRef<'a'> & TRestRest;\n\n// If `as` is something else, but rest.href is a string, return explicit anchor props\nexport function useStrictInferredPolymorphicProps<\n  TAs extends PolymorphicAs | undefined,\n  TRest extends { href: string },\n  TDefault extends PolymorphicAs = typeof FALLBACK,\n>(\n  as: TAs,\n  rest: TRest,\n  defaultAs?: TDefault,\n): { as: 'a'; href: string } & ComponentPropsWithoutRef<'a'> & TRest;\n\n// If `as` is otherwise defined, we return that element's component props\nexport function useStrictInferredPolymorphicProps<\n  TAs extends PolymorphicAs | undefined,\n  TRest extends Record<string, any>,\n  TDefault extends PolymorphicAs = typeof FALLBACK,\n>(\n  as: TAs,\n  rest: TRest,\n  defaultAs?: TDefault,\n): TAs extends PolymorphicAs\n  ? { as: TAs; href?: string } & ComponentPropsWithoutRef<TAs> & TRest\n  : { as: TDefault; href?: string } & ComponentPropsWithoutRef<TDefault> &\n      TRest;\n\n// If default is undefined, use the fallback as\nexport function useStrictInferredPolymorphicProps<\n  TAs extends PolymorphicAs | undefined,\n  TRest extends Record<string, any>,\n  TDefault extends undefined,\n>(\n  as: TAs,\n  rest: TRest,\n  defaultAs?: TDefault,\n): { as: typeof FALLBACK; href?: string } & ComponentPropsWithoutRef<\n  typeof FALLBACK\n> &\n  TRest;\n\nexport function useStrictInferredPolymorphicProps<\n  TAs extends PolymorphicAs | undefined,\n  TRest extends Record<string, any>,\n  TDefault extends PolymorphicAs = typeof FALLBACK,\n>(as?: TAs, rest?: TRest, defaultAs?: TDefault) {\n  const href = rest?.href;\n\n  // If `as` is explicitly \"a\", we return anchor props, with explicit href\n  if (as && as === 'a') {\n    if (!href || typeof href !== 'string') {\n      consoleOnce.error(\n        'LG Polymorphic error',\n        'Component received `as=\"a\"`, but did not receive an `href` prop',\n      );\n    }\n\n    return {\n      as: 'a' as PolymorphicAs,\n      href: typeof href === 'string' ? href : undefined,\n      ...rest,\n    };\n  }\n\n  // If `as` is anything else, but rest.href is a string, return explicit anchor props\n  if (href) {\n    return {\n      as: 'a',\n      href,\n      ...rest,\n    };\n  }\n\n  // If `as` is otherwise defined, we return that element's component props\n  if (as) {\n    return {\n      as,\n      href: undefined,\n      ...rest,\n    };\n  }\n\n  // If `as` is undefined, we return the default argument's props\n  return {\n    as: defaultAs || FALLBACK,\n    ...rest,\n  };\n}\n"],"names":["usePolymorphicRef","_","React","default","useRef","usePolymorphicComponent","as","usePolymorphic","Component","ref","_excluded","BasePolymorph","_ref","children","rest","_objectWithoutProperties","createElement","_extends","Polymorph","forwardRef","displayName","useInferredPolymorphicProps","asProp","defaultAs","href","consoleOnce","error","_objectSpread","undefined","render","PolyComponent","length","props","has","restArg","_useInferredPolymorph"],"mappings":"khEAAO,ICKIA,EAAoB,SAA2BC,GAKxD,OAAOC,EAAKC,QAACC,OAAO,KACtB,EAOO,SAASC,EAAwBC,GACtC,OAAOA,GAAM,KACf,CAMO,SAASC,EAAeD,GAG7B,MAAO,CACLE,UAHcH,EAAwBC,GAItCG,IAHQT,IAKZ,CChCA,IAAIU,EAAY,CAAC,KAAM,YAMZC,EAAgB,SAAuBC,EAAMH,GACtD,IAAIH,EAAKM,EAAKN,GACZO,EAAWD,EAAKC,SAChBC,EAAOC,EAAyBH,EAAMF,GAEtCF,EADoBD,EAAeD,GACPE,UAC9B,OAAoBN,EAAAA,QAAMc,cAAcR,EAAWS,EAAS,CAAA,EAAIH,EAAM,CACpEL,IAAKA,IACHI,EACN,EAcWK,EAAyBhB,EAAAA,QAAMiB,WAAWR,GACrDO,EAAUE,YAAc,YCjBjB,SAASC,EAA4BC,EAAQR,EAAMS,GACxD,IAAIC,EAAOV,aAAmC,EAASA,EAAKU,KAG5D,OAAIF,GAAqB,MAAXA,GACPE,GAAwB,iBAATA,GAClBC,EAAAA,YAAYC,MAAM,uBAAwB,mEAErCC,EAAc,CACnBrB,GAAI,IACJkB,KAAsB,iBAATA,EAAoBA,OAAOI,GACvCd,IAKIa,EADLL,EACmB,CACnBhB,GAAIgB,EACJE,KAAMA,QAAQI,GAKdJ,GAAwB,iBAATA,EACI,CACnBlB,GAAI,IACJkB,KAAMA,GAKW,CACnBlB,GAAIiB,GH9Cc,OGiCfT,EAeP,CC/CA,IAAIJ,EAAY,CAAC,4BCMgB,SAA6BmB,EAAQT,GACpE,IAAIR,EACAkB,EAQJ,OANEA,EADoB,IAAlBD,EAAOE,OACOF,EAGa3B,EAAKC,QAACgB,WAAWU,IAElCT,YAA6G,QAA9FR,EAAOQ,QAAiDA,EAAcS,EAAOT,mBAAkC,IAATR,EAAkBA,EAAO,uBACrJkB,CACT,8BCNyB,SAAqBD,EAAQT,GACpD,IAAIR,EAMAkB,EAAkC,IAAlBD,EAAOE,OAAeF,EAG1CV,EAAUA,WAACU,GAEX,OADAC,EAAcV,YAA6G,QAA9FR,EAAOQ,QAAiDA,EAAcS,EAAOT,mBAAkC,IAATR,EAAkBA,EAAO,uBACrJkB,CACT,mBCpB4B,SAAwBxB,EAAI0B,GACtD,MAAc,MAAP1B,GAAc2B,EAAG9B,QAAC6B,EAAO,OAClC,2BHMO,SAAgCV,EAAQY,EAASX,GACtD,IAAIY,EAAwBd,EAA4BC,EAAQY,EAASX,GACvEjB,EAAK6B,EAAsB7B,GAC3BQ,EAAOC,EAAyBoB,EAAuBzB,GAEzD,MAAO,CACLF,UAAWF,EACXA,GAAIA,EACJG,IAJQT,IAKRc,KAAMA,EAEV,oCIlBO,SAAyCR,EAAIQ,EAAMS,GACxD,OAAOjB,IAA6E,iBAA3DQ,aAAmC,EAASA,EAAKU,MAAqB,IAAMD,QAA6CA,EAAY,MAChK,2ICqBO,SAA2CjB,EAAIQ,EAAMS,GAC1D,IAAIC,EAAOV,aAAmC,EAASA,EAAKU,KAG5D,OAAIlB,GAAa,MAAPA,GACHkB,GAAwB,iBAATA,GAClBC,EAAAA,YAAYC,MAAM,uBAAwB,mEAErCC,EAAc,CACnBrB,GAAI,IACJkB,KAAsB,iBAATA,EAAoBA,OAAOI,GACvCd,IAKIa,EADLH,EACmB,CACnBlB,GAAI,IACJkB,KAAMA,GAKNlB,EACmB,CACnBA,GAAIA,EACJkB,UAAMI,GAKW,CACnBtB,GAAIiB,GT7Dc,OSgDfT,EAeP"}