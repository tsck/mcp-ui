{"version":3,"file":"index.js","sources":["../../src/styles.tsx","../../src/Body/Body.tsx","../../src/utils/useUpdatedBaseFontSize.ts","../../src/Description/Description.styles.ts","../../src/utils/getLgIds.ts","../../src/Description/Description.tsx","../../src/Disclaimer/Disclaimer.styles.ts","../../src/Error/Error.styles.ts","../../src/Disclaimer/Disclaimer.tsx","../../src/H1/H1.styles.ts","../../src/Error/Error.tsx","../../src/H1/H1.tsx","../../src/H2/H2.styles.ts","../../src/H2/H2.tsx","../../src/H3/H3.styles.ts","../../src/H3/H3.tsx","../../src/InlineCode/InlineCode.styles.ts","../../src/InlineCode/InlineCode.tsx","../../src/InlineCode/utils.ts","../../src/InlineKeyCode/InlineKeyCode.styles.ts","../../src/Label/Label.styles.ts","../../src/InlineKeyCode/InlineKeyCode.tsx","../../src/Label/Label.tsx","../../src/Link/shared.styles.ts","../../src/Link/BackLink/BackLink.styles.ts","../../src/Link/Link/Link.styles.ts","../../src/Overline/Overline.styles.ts","../../src/Link/BackLink/BackLink.tsx","../../src/Link/Link/Link.types.ts","../../src/Link/Link/Link.tsx","../../src/Overline/Overline.tsx","../../src/Subtitle/Subtitle.styles.ts","../../src/Subtitle/Subtitle.tsx","../../src/utils/StaticWidthText.tsx"],"sourcesContent":["import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport {\n  BaseFontSize,\n  color,\n  fontFamilies,\n  typeScales,\n} from '@leafygreen-ui/tokens';\n\nexport const baseTypographyStyles = css`\n  margin: unset;\n  font-family: ${fontFamilies.default};\n  color: ${color.light.text.primary.default};\n`;\n\nexport const bodyTypeScaleStyles: Record<BaseFontSize, string> = {\n  [BaseFontSize.Body1]: css`\n    font-size: ${typeScales.body1.fontSize}px;\n    line-height: ${typeScales.body1.lineHeight}px;\n  `,\n  [BaseFontSize.Body2]: css`\n    font-size: ${typeScales.body2.fontSize}px;\n    line-height: ${typeScales.body2.lineHeight}px;\n  `,\n} as const;\n\nexport const codeTypeScaleStyles: Record<BaseFontSize, string> = {\n  [BaseFontSize.Body1]: css`\n    font-size: ${typeScales.code1.fontSize}px;\n    line-height: ${typeScales.code1.lineHeight}px;\n  `,\n  [BaseFontSize.Body2]: css`\n    font-size: ${typeScales.code2.fontSize}px;\n    line-height: ${typeScales.code2.lineHeight}px;\n  `,\n} as const;\n\nexport const defaultTextColor: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${color.light.text.primary.default};\n  `,\n  [Theme.Dark]: css`\n    color: ${color.dark.text.primary.default};\n  `,\n};\n","import React from 'react';\n\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  Polymorphic,\n  PolymorphicAs,\n  usePolymorphic,\n} from '@leafygreen-ui/polymorphic';\nimport {\n  FontWeight,\n  fontWeights as fontWeightTokens,\n} from '@leafygreen-ui/tokens';\n\nimport {\n  baseTypographyStyles,\n  bodyTypeScaleStyles,\n  defaultTextColor,\n} from '../styles';\nimport { useUpdatedBaseFontSize } from '../utils/useUpdatedBaseFontSize';\n\nimport { BaseBodyProps } from './Body.types';\n\nconst Body = Polymorphic<BaseBodyProps>(\n  ({\n    baseFontSize: baseFontSizeOverride,\n    darkMode: darkModeProp,\n    className,\n    weight = FontWeight.Regular,\n    as = 'p' as PolymorphicAs,\n    ...rest\n  }) => {\n    const { theme } = useDarkMode(darkModeProp);\n    const baseFontSize = useUpdatedBaseFontSize(baseFontSizeOverride);\n    const { Component } = usePolymorphic(as);\n\n    // Currently hardcoding selectors to keys; could consider a dynamic solution that runs once\n    const fontWeight = css`\n      font-weight: ${fontWeightTokens[weight]};\n      strong,\n      b {\n        font-weight: ${fontWeightTokens.semiBold};\n      }\n    `;\n\n    return (\n      <Component\n        className={cx(\n          baseTypographyStyles,\n          bodyTypeScaleStyles[baseFontSize],\n          defaultTextColor[theme],\n          fontWeight,\n          className,\n        )}\n        {...rest}\n      />\n    );\n  },\n);\n\nBody.displayName = 'Body';\n\nexport default Body;\n","import { useBaseFontSize } from '@leafygreen-ui/leafygreen-provider';\nimport { BaseFontSize } from '@leafygreen-ui/tokens';\n\n/**\n * A temporary wrapper around {@link useBaseFontSize}\n *\n * Returns a font size token consistent with the visual brand refresh.\n *\n * Once all components have been updated for the refresh,\n * this hook will be removed, and {@link useBaseFontSize} updated\n * to return the updated tokens.\n *\n * @param override: If the calling component accepts a `baseFontSize` prop, pass that prop into this hook to respect it\n * @deprecated\n * @internal\n * @returns - {@link BaseFontSize}\n */\nexport const useUpdatedBaseFontSize = (\n  override?: BaseFontSize | 14,\n): BaseFontSize => {\n  const baseFontSize = useBaseFontSize();\n  if (override)\n    return override === 16 ? BaseFontSize.Body2 : BaseFontSize.Body1;\n  return baseFontSize === 16 ? BaseFontSize.Body2 : BaseFontSize.Body1;\n};\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport {\n  BaseFontSize,\n  color,\n  fontFamilies,\n  fontWeights,\n  typeScales,\n} from '@leafygreen-ui/tokens';\n\nexport const getDescriptionStyle = (theme: Theme) => {\n  return css`\n    color: ${color[theme].text.secondary.default};\n\n    font-family: ${fontFamilies.default};\n    font-weight: ${fontWeights.regular};\n    margin-top: 0;\n    margin-bottom: 0;\n  `;\n};\n\nexport const getDisabledDescriptionColorStyle = (theme: Theme) => {\n  return css`\n    color: ${color[theme].text.disabled.default};\n  `;\n};\n\nexport const descriptionTypeScaleStyles: Record<BaseFontSize, string> = {\n  [BaseFontSize.Body1]: css`\n    font-size: ${typeScales.body1.fontSize}px;\n    line-height: ${typeScales.body1.lineHeight}px;\n  `,\n  [BaseFontSize.Body2]: css`\n    font-size: ${typeScales.body2.fontSize}px;\n    line-height: 20px; // Hardcoding because it does not match body2 lineHeight\n  `,\n};\n","import { LgIdString } from '@leafygreen-ui/lib';\n\nexport const DEFAULT_LGID_ROOT = 'lg-typography';\n\nexport const getLgIds = (root: LgIdString = DEFAULT_LGID_ROOT) => {\n  const ids = {\n    root,\n    label: `${root}-label`,\n    description: `${root}-description`,\n  } as const;\n  return ids;\n};\n\nexport type GetLgIdsReturnType = ReturnType<typeof getLgIds>;\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport { Polymorphic, usePolymorphic } from '@leafygreen-ui/polymorphic';\n\nimport { getLgIds } from '../utils';\nimport { useUpdatedBaseFontSize } from '../utils/useUpdatedBaseFontSize';\n\nimport {\n  descriptionTypeScaleStyles,\n  getDescriptionStyle,\n  getDisabledDescriptionColorStyle,\n} from './Description.styles';\nimport { DescriptionProps } from './Description.types';\n\nexport const Description = Polymorphic<DescriptionProps>(\n  ({\n    as: asProp,\n    baseFontSize: baseFontSizeOverride,\n    children,\n    className,\n    darkMode: darkModeProp,\n    'data-lgid': dataLgId,\n    disabled = false,\n    ...rest\n  }) => {\n    const { theme } = useDarkMode(darkModeProp);\n    const baseFontSize = useUpdatedBaseFontSize(baseFontSizeOverride);\n    const asDerivedFromChildren = ['string', 'number'].includes(typeof children)\n      ? 'p'\n      : 'div';\n    const as = asProp ?? asDerivedFromChildren;\n    const { Component } = usePolymorphic(as);\n\n    return (\n      <Component\n        data-lgid={getLgIds(dataLgId).description}\n        data-testid={getLgIds(dataLgId).description}\n        className={cx(\n          getDescriptionStyle(theme),\n          descriptionTypeScaleStyles[baseFontSize],\n          {\n            [getDisabledDescriptionColorStyle(theme)]: disabled,\n          },\n          className,\n        )}\n        {...rest}\n      >\n        {children}\n      </Component>\n    );\n  },\n);\n\nDescription.displayName = 'Description';\n\nexport default Description;\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { color } from '@leafygreen-ui/tokens';\n\nexport const disclaimerTextColor: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${color.light.text.secondary.default};\n  `,\n  [Theme.Dark]: css`\n    color: ${color.dark.text.secondary.default};\n  `,\n};\n\nexport const disclaimerStyles = css`\n  display: block;\n  font-size: 11px;\n  line-height: 16px;\n  letter-spacing: 0.2px;\n`;\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport {\n  BaseFontSize,\n  color,\n  fontFamilies,\n  fontWeights,\n  typeScales,\n} from '@leafygreen-ui/tokens';\n\nexport const getErrorMessageStyle = ({\n  theme,\n  baseFontSize,\n}: {\n  theme: Theme;\n  baseFontSize: BaseFontSize;\n}) => {\n  const fontSize =\n    baseFontSize === BaseFontSize.Body1\n      ? typeScales.body1.fontSize\n      : typeScales.body2.fontSize;\n  const lineHeight =\n    baseFontSize === BaseFontSize.Body1 ? typeScales.body1.lineHeight : 20;\n\n  return css`\n    font-family: ${fontFamilies.default};\n    font-weight: ${fontWeights.regular};\n    font-size: inherit;\n    line-height: inherit;\n\n    /* Unsets browser defaults */\n    margin-block-start: 0;\n    margin-block-end: 0;\n\n    /* Variable Styles */\n    color: ${color[theme].text.error.default};\n    font-size: ${fontSize}px;\n    line-height: ${lineHeight}px;\n  `;\n};\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\n\nimport { baseTypographyStyles } from '../styles';\n\nimport { disclaimerStyles, disclaimerTextColor } from './Disclaimer.styles';\nimport { DisclaimerProps } from './Disclaimer.types';\n\nexport function Disclaimer({\n  darkMode: darkModeProp,\n  children,\n  className,\n  ...rest\n}: DisclaimerProps) {\n  const { theme } = useDarkMode(darkModeProp);\n\n  return (\n    <small\n      {...rest}\n      className={cx(\n        baseTypographyStyles,\n        disclaimerStyles,\n        disclaimerTextColor[theme],\n        className,\n      )}\n    >\n      {children}\n    </small>\n  );\n}\n\nDisclaimer.displayName = 'Disclaimer';\n\nexport default Disclaimer;\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { fontFamilies, fontWeights } from '@leafygreen-ui/tokens';\n\nexport const h1Styles = css`\n  font-weight: ${fontWeights.regular};\n  font-size: 48px;\n  line-height: 64px;\n  font-family: ${fontFamilies.serif};\n`;\n\nexport const h1Color: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.green.dark2};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.gray.light2};\n  `,\n};\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  Polymorphic,\n  PolymorphicAs,\n  usePolymorphic,\n} from '@leafygreen-ui/polymorphic';\n\nimport { useUpdatedBaseFontSize } from '../utils/useUpdatedBaseFontSize';\n\nimport { getErrorMessageStyle } from './Error.styles';\nimport { BaseErrorProps } from './Error.types';\n\nconst Error = Polymorphic<BaseErrorProps>(\n  ({\n    as = 'p' as PolymorphicAs,\n    darkMode: darkModeProp,\n    children,\n    className,\n    ...rest\n  }) => {\n    const { theme } = useDarkMode(darkModeProp);\n    const baseFontSize = useUpdatedBaseFontSize();\n    const { Component } = usePolymorphic(as);\n\n    return (\n      <Component\n        {...rest}\n        className={cx(getErrorMessageStyle({ theme, baseFontSize }), className)}\n      >\n        {children}\n      </Component>\n    );\n  },\n);\n\nexport default Error;\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  Polymorphic,\n  PolymorphicAs,\n  usePolymorphic,\n} from '@leafygreen-ui/polymorphic';\n\nimport { baseTypographyStyles } from '../styles';\n\nimport { h1Color, h1Styles } from './H1.styles';\nimport { BaseH1Props } from './H1.types';\n\nconst H1 = Polymorphic<BaseH1Props>(\n  ({\n    darkMode: darkModeProp,\n    className,\n    as = 'h1' as PolymorphicAs,\n    ...rest\n  }) => {\n    const { theme } = useDarkMode(darkModeProp);\n    const { Component } = usePolymorphic(as);\n\n    return (\n      <Component\n        className={cx(\n          baseTypographyStyles,\n          h1Styles,\n          h1Color[theme],\n          className,\n        )}\n        {...rest}\n      />\n    );\n  },\n);\n\nH1.displayName = 'H1';\n\nexport default H1;\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { fontFamilies, fontWeights } from '@leafygreen-ui/tokens';\n\nexport const h2Styles = css`\n  font-size: 32px;\n  line-height: 40px;\n  font-weight: ${fontWeights.regular};\n  font-family: ${fontFamilies.serif};\n`;\n\nexport const h2Color: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.green.dark2};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.gray.light2};\n  `,\n};\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  Polymorphic,\n  PolymorphicAs,\n  usePolymorphic,\n} from '@leafygreen-ui/polymorphic';\n\nimport { baseTypographyStyles } from '../styles';\n\nimport { h2Color, h2Styles } from './H2.styles';\nimport { BaseH2Props } from './H2.types';\n\nconst H2 = Polymorphic<BaseH2Props>(\n  ({\n    darkMode: darkModeProp,\n    className,\n    as = 'h2' as PolymorphicAs,\n    ...rest\n  }) => {\n    const { theme } = useDarkMode(darkModeProp);\n    const { Component } = usePolymorphic(as);\n\n    return (\n      <Component\n        className={cx(\n          baseTypographyStyles,\n          h2Styles,\n          h2Color[theme],\n          className,\n        )}\n        {...rest}\n      />\n    );\n  },\n);\n\nH2.displayName = 'H2';\n\nexport default H2;\n","import { css } from '@leafygreen-ui/emotion';\nimport { fontWeights } from '@leafygreen-ui/tokens';\n\nexport const h3Styles = css`\n  font-size: 24px;\n  line-height: 32px;\n  font-weight: ${fontWeights.medium};\n`;\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  Polymorphic,\n  PolymorphicAs,\n  usePolymorphic,\n} from '@leafygreen-ui/polymorphic';\n\nimport { baseTypographyStyles, defaultTextColor } from '../styles';\n\nimport { h3Styles } from './H3.styles';\nimport { BaseH3Props } from './H3.types';\n\nconst H3 = Polymorphic<BaseH3Props>(\n  ({\n    darkMode: darkModeProp,\n    className,\n    as = 'h3' as PolymorphicAs,\n    ...rest\n  }) => {\n    const { theme } = useDarkMode(darkModeProp);\n    const { Component } = usePolymorphic(as);\n\n    return (\n      <Component\n        className={cx(\n          baseTypographyStyles,\n          h3Styles,\n          defaultTextColor[theme],\n          className,\n        )}\n        {...rest}\n      />\n    );\n  },\n);\n\nH3.displayName = 'H3';\n\nexport default H3;\n","import { css } from '@leafygreen-ui/emotion';\nimport { createUniqueClassName, Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { color, focusRing, fontFamilies } from '@leafygreen-ui/tokens';\n\nexport const anchorClassName = createUniqueClassName();\n\nexport const code = css`\n  display: inline;\n  transition: all 0.15s ease-in-out;\n  border-radius: 3px;\n  font-family: ${fontFamilies.code};\n  line-height: 20px;\n\n  .${anchorClassName}:hover > & {\n    text-decoration: none;\n  }\n`;\n\nexport const codeModes: Record<Theme, string> = {\n  [Theme.Light]: css`\n    background-color: ${color.light.background.secondary.default};\n    border: 1px solid ${color.light.border.secondary.default};\n    color: ${palette.gray.dark3};\n\n    .${anchorClassName}:hover > & {\n      box-shadow: 0 0 0 3px ${palette.gray.light2};\n      border: 1px solid ${palette.gray.light1};\n    }\n  `,\n\n  [Theme.Dark]: css`\n    background-color: ${color.dark.background.secondary.default};\n    border: 1px solid ${palette.gray.dark2};\n    color: ${palette.gray.light1};\n\n    .${anchorClassName}:hover > & {\n      box-shadow: 0 0 0 3px ${palette.gray.dark2};\n      border: 1px solid ${palette.gray.dark1};\n    }\n  `,\n};\n\nexport const codeFocusModes: Record<Theme, string> = {\n  [Theme.Light]: css`\n    .${anchorClassName}:focus-visible > & {\n      box-shadow: ${focusRing[Theme.Light].default};\n      border: 1px solid ${palette.blue.base};\n    }\n  `,\n\n  [Theme.Dark]: css`\n    .${anchorClassName}:focus-visible > & {\n      box-shadow: ${focusRing[Theme.Dark].default};\n      border: 1px solid ${palette.blue.base};\n    }\n  `,\n};\n\nexport const codeLinkStyleModes: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.blue.base};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.blue.light1};\n  `,\n};\n\nexport const codeLinkWrapper = css`\n  text-decoration: none;\n  margin: 0;\n  padding: 0;\n  line-height: 20px;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nexport const nowrap = css`\n  white-space: nowrap;\n`;\n\nexport const normal = css`\n  white-space: normal;\n`;\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  InferredPolymorphic,\n  useInferredPolymorphic,\n} from '@leafygreen-ui/polymorphic';\n\nimport { codeTypeScaleStyles } from '../styles';\nimport { useUpdatedBaseFontSize } from '../utils/useUpdatedBaseFontSize';\n\nimport {\n  anchorClassName,\n  code,\n  codeFocusModes,\n  codeLinkStyleModes,\n  codeLinkWrapper,\n  codeModes,\n  normal,\n  nowrap,\n} from './InlineCode.styles';\nimport { BaseInlineCodeProps } from './InlineCode.types';\nimport { getChildrenLength } from './utils';\n\nconst InlineCode = InferredPolymorphic<BaseInlineCodeProps, 'code'>(\n  (\n    {\n      children,\n      className,\n      darkMode: darkModeProp,\n      baseFontSize: baseFontSizeOverride,\n      as,\n      ...rest\n    },\n    forwardedRef,\n  ) => {\n    const { theme } = useDarkMode(darkModeProp);\n    const baseFontSize = useUpdatedBaseFontSize(baseFontSizeOverride);\n    const { Component } = useInferredPolymorphic(as, rest, 'code');\n\n    const charsCount = getChildrenLength(children);\n    const whiteSpace = charsCount <= 30 ? nowrap : normal;\n    const needsWrapper = Component !== 'code';\n\n    const renderedInlineCode = (\n      <code\n        ref={forwardedRef}\n        className={cx(\n          codeTypeScaleStyles[baseFontSize],\n          code,\n          codeModes[theme],\n          codeFocusModes[theme],\n          whiteSpace,\n          {\n            [codeLinkStyleModes[theme]]: needsWrapper,\n          },\n          className,\n        )}\n      >\n        {children}\n      </code>\n    );\n\n    if (needsWrapper) {\n      return (\n        <Component\n          className={cx(anchorClassName, codeLinkWrapper, className)}\n          {...rest}\n        >\n          {renderedInlineCode}\n        </Component>\n      );\n    }\n\n    return React.cloneElement(renderedInlineCode, rest);\n  },\n);\n\nInlineCode.displayName = 'InlineCode';\n\nexport default InlineCode;\n","import { isValidElement } from 'react';\n\nimport { getNodeTextContent } from '@leafygreen-ui/lib';\n\nexport const getChildrenLength = (children: any): number => {\n  if (typeof children === 'string') {\n    return children.match(/./gu)?.length ?? 0;\n  } else if (\n    Array.isArray(children) &&\n    children.every(child => typeof child === 'string')\n  ) {\n    return children.join('').match(/./gu)?.length ?? 0;\n  } else if (isValidElement(children)) {\n    const text = getNodeTextContent(children);\n    return text.match(/./gu)?.length ?? 0;\n  }\n\n  return 0;\n};\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { color, fontFamilies } from '@leafygreen-ui/tokens';\n\nexport const inlineKeyCodeStyles = css`\n  font-family: ${fontFamilies.code};\n  border: 1px solid;\n  border-radius: 3px;\n  padding-left: 5px;\n  padding-right: 5px;\n`;\n\nexport const inlineKeyCodeColor: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${color.light.text.primary.default};\n    border-color: ${palette.gray.dark3};\n    background-color: ${palette.white};\n  `,\n  [Theme.Dark]: css`\n    color: ${color.dark.text.primary.default};\n    border-color: ${palette.gray.base};\n    background-color: ${palette.gray.dark3};\n  `,\n};\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport {\n  BaseFontSize,\n  color,\n  fontFamilies,\n  fontWeights,\n  typeScales,\n} from '@leafygreen-ui/tokens';\n\nexport const getLabelStyles = (theme: Theme) => {\n  return css`\n    color: ${color[theme].text.primary.default};\n\n    font-family: ${fontFamilies.default};\n    font-weight: ${fontWeights.semiBold};\n  `;\n};\n\nexport const getDisabledLabelColorStyle = (theme: Theme) => {\n  return css`\n    color: ${color[theme].text.disabled.default};\n  `;\n};\n\nexport const labelTypeScaleStyles: Record<BaseFontSize, string> = {\n  [BaseFontSize.Body1]: css`\n    font-size: ${typeScales.body1.fontSize}px;\n    line-height: ${typeScales.body1.lineHeight}px;\n  `,\n  [BaseFontSize.Body2]: css`\n    font-size: ${typeScales.body2.fontSize}px;\n    line-height: 20px; // Hardcoding because it does not match body2 lineHeight\n  `,\n};\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\n\nimport { codeTypeScaleStyles } from '../styles';\nimport { useUpdatedBaseFontSize } from '../utils/useUpdatedBaseFontSize';\n\nimport {\n  inlineKeyCodeColor,\n  inlineKeyCodeStyles,\n} from './InlineKeyCode.styles';\nimport { InlineKeyCodeProps } from './InlineKeyCode.types';\n\nfunction InlineKeyCode({\n  baseFontSize: baseFontSizeOverride,\n  darkMode: darkModeProp,\n  children,\n  className,\n  ...rest\n}: InlineKeyCodeProps) {\n  const baseFontSize = useUpdatedBaseFontSize(baseFontSizeOverride);\n  const { theme } = useDarkMode(darkModeProp);\n\n  return (\n    <code\n      className={cx(\n        inlineKeyCodeStyles,\n        inlineKeyCodeColor[theme],\n        codeTypeScaleStyles[baseFontSize],\n        className,\n      )}\n      {...rest}\n    >\n      {children}\n    </code>\n  );\n}\n\nInlineKeyCode.displayName = 'InlineKeyCode';\n\nexport default InlineKeyCode;\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  Polymorphic,\n  PolymorphicAs,\n  usePolymorphic,\n} from '@leafygreen-ui/polymorphic';\n\nimport { getLgIds } from '../utils';\nimport { useUpdatedBaseFontSize } from '../utils/useUpdatedBaseFontSize';\n\nimport {\n  getDisabledLabelColorStyle,\n  getLabelStyles,\n  labelTypeScaleStyles,\n} from './Label.styles';\nimport { BaseLabelProps } from './Label.types';\n\nexport const Label = Polymorphic<BaseLabelProps>(\n  ({\n    baseFontSize: baseFontSizeOverride,\n    darkMode: darkModeProp,\n    className,\n    children,\n    disabled = false,\n    as = 'label' as PolymorphicAs,\n    'data-lgid': dataLgId,\n    ...rest\n  }) => {\n    const { theme } = useDarkMode(darkModeProp);\n    const baseFontSize = useUpdatedBaseFontSize(baseFontSizeOverride);\n    const { Component } = usePolymorphic(as);\n\n    return (\n      <Component\n        data-lgid={getLgIds(dataLgId).label}\n        data-testid={getLgIds(dataLgId).label}\n        className={cx(\n          getLabelStyles(theme),\n          labelTypeScaleStyles[baseFontSize],\n          { [getDisabledLabelColorStyle(theme)]: disabled },\n          className,\n        )}\n        {...rest}\n      >\n        {children}\n      </Component>\n    );\n  },\n);\n\nLabel.displayName = 'Label';\n\nexport default Label;\n","import { css } from '@leafygreen-ui/emotion';\nimport { createUniqueClassName, Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport {\n  BaseFontSize,\n  fontFamilies,\n  fontWeights,\n  transitionDuration,\n} from '@leafygreen-ui/tokens';\n\nimport { bodyTypeScaleStyles } from '../styles';\n\nexport const anchorClassName = createUniqueClassName();\n\nexport const linkStyles = css`\n  font-family: ${fontFamilies.default};\n  display: inline;\n  align-items: center;\n  text-decoration: none;\n  text-decoration-color: transparent;\n  cursor: pointer;\n  font-size: inherit;\n  line-height: inherit;\n  appearance: none;\n  background: none;\n  border: none;\n  padding: 0;\n\n  &:hover,\n  &[data-hover='true'],\n  &:focus-visible,\n  &[data-focus='true'] {\n    text-decoration: underline;\n    transition: text-decoration ${transitionDuration.default}ms ease-in-out;\n    text-underline-offset: 4px;\n    text-decoration-thickness: 2px;\n  }\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nexport const linkModeStyles: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.blue.base};\n    font-weight: ${fontWeights.regular};\n\n    &:hover,\n    &[data-hover='true'] {\n      text-decoration-color: ${palette.gray.light2};\n    }\n\n    &:focus-visible,\n    &[data-focus='true'] {\n      text-decoration-color: ${palette.blue.base};\n    }\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.blue.light1};\n    font-weight: ${fontWeights.semiBold};\n\n    &:hover,\n    &[data-hover='true'] {\n      text-decoration-color: ${palette.gray.dark2};\n    }\n\n    &:focus-visible,\n    &[data-focus='true'] {\n      text-decoration-color: ${palette.blue.base};\n    }\n  `,\n};\n\nexport const linkScaleStyles = (baseFontSize?: BaseFontSize) => {\n  if (baseFontSize) {\n    return bodyTypeScaleStyles[baseFontSize];\n  }\n};\n","import { css } from '@leafygreen-ui/emotion';\nimport { spacing } from '@leafygreen-ui/tokens';\n\nexport const backLinkBaseStyles = css`\n  gap: ${spacing[100]}px;\n  display: inline-flex;\n`;\n","import { css } from '@leafygreen-ui/emotion';\n\nimport { anchorClassName } from '../shared.styles';\n\nexport const arrowRightIconPersist = css`\n  transform: translate3d(3px, 0, 0);\n  top: 1px;\n  position: relative;\n`;\n\nexport const arrowRightIconHover = css`\n  opacity: 0;\n  transform: translate3d(-3px, 0, 0);\n  transition: 100ms ease-in;\n  transition-property: opacity, transform;\n  top: 1px;\n  position: relative;\n\n  .${anchorClassName}:hover &, .${anchorClassName}[data-hover='true'] & {\n    opacity: 1;\n    transform: translate3d(3px, 0, 0);\n  }\n`;\n\nexport const openInNewTabStyles = css`\n  position: relative;\n  bottom: 2px;\n  left: -1px;\n  height: 12px;\n`;\n","import { css } from '@leafygreen-ui/emotion';\nimport { fontWeights } from '@leafygreen-ui/tokens';\n\nexport const overlineStyles = css`\n  font-size: 12px;\n  font-weight: ${fontWeights.semiBold};\n  text-transform: uppercase;\n  line-height: 20px;\n  letter-spacing: 0.4px;\n`;\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport ArrowLeftIcon from '@leafygreen-ui/icon/dist/ArrowLeft';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  InferredPolymorphic,\n  useInferredPolymorphic,\n} from '@leafygreen-ui/polymorphic';\n\nimport { useUpdatedBaseFontSize } from '../../utils/useUpdatedBaseFontSize';\nimport {\n  anchorClassName,\n  linkModeStyles,\n  linkScaleStyles,\n  linkStyles,\n} from '../shared.styles';\n\nimport { backLinkBaseStyles } from './BackLink.styles';\nimport { BaseBackLinkProps } from './BackLink.types';\n\nconst BackLink = InferredPolymorphic<BaseBackLinkProps, 'span'>(\n  (\n    {\n      children,\n      className,\n      baseFontSize: baseFontSizeOverride,\n      darkMode: darkModeProp,\n      as,\n      ...rest\n    },\n    fwdRef,\n  ) => {\n    const { theme } = useDarkMode(darkModeProp);\n    const baseFontSize = useUpdatedBaseFontSize(baseFontSizeOverride);\n    const { Component } = useInferredPolymorphic(as, rest, 'span');\n\n    return (\n      <Component\n        className={cx(\n          anchorClassName,\n          linkStyles,\n          linkScaleStyles(baseFontSize),\n          linkModeStyles[theme],\n          backLinkBaseStyles,\n          className,\n        )}\n        ref={fwdRef}\n        {...rest}\n      >\n        <ArrowLeftIcon role=\"presentation\" />\n\n        {children}\n      </Component>\n    );\n  },\n);\n\nexport default BackLink;\n","import {\n  InferredPolymorphicPropsWithRef,\n  PolymorphicAs,\n} from '@leafygreen-ui/polymorphic';\n\nimport { ResponsiveTypographyProps } from '../../types';\n\nconst ArrowAppearance = {\n  Hover: 'hover',\n  Persist: 'persist',\n  None: 'none',\n} as const;\n\ntype ArrowAppearance = (typeof ArrowAppearance)[keyof typeof ArrowAppearance];\n\nexport { ArrowAppearance };\n\nexport interface BaseLinkProps extends ResponsiveTypographyProps {\n  /**\n   * Displays a right arrow adjacent to the anchor tag. When set to `persist` the arrow will always be present. When set to `hover`, the arrow will only appear when hovering over the arrow.\n   */\n  arrowAppearance?: ArrowAppearance;\n  /**\n   * Hides the external icon when the current host name is different from the host of the destination URL\n   */\n  hideExternalIcon?: boolean;\n}\n\n// For external consumption only\nexport type LinkProps<T extends PolymorphicAs = PolymorphicAs> =\n  InferredPolymorphicPropsWithRef<T, BaseLinkProps>;\n","import React, { useEffect, useMemo, useState } from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport ArrowRightIcon from '@leafygreen-ui/icon/dist/ArrowRight';\nimport OpenNewTabIcon from '@leafygreen-ui/icon/dist/OpenNewTab';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  hasAnchorProps,\n  InferredPolymorphic,\n  useInferredPolymorphic,\n} from '@leafygreen-ui/polymorphic';\n\nimport { useUpdatedBaseFontSize } from '../../utils/useUpdatedBaseFontSize';\nimport {\n  anchorClassName,\n  linkModeStyles,\n  linkScaleStyles,\n  linkStyles,\n} from '../shared.styles';\n\nimport {\n  arrowRightIconHover,\n  arrowRightIconPersist,\n  openInNewTabStyles,\n} from './Link.styles';\nimport { ArrowAppearance, BaseLinkProps } from './Link.types';\n\nconst Link = InferredPolymorphic<BaseLinkProps, 'span'>(\n  (\n    {\n      children,\n      className,\n      arrowAppearance = ArrowAppearance.None,\n      hideExternalIcon = false,\n      baseFontSize: baseFontSizeOverride,\n      darkMode: darkModeProp,\n      as: asProp,\n      ...props\n    },\n    fwdRef,\n  ) => {\n    const [currentHostname, setCurrentHostname] = useState('');\n    useEffect(() => {\n      setCurrentHostname(window.location.hostname);\n    }, []);\n\n    const { theme } = useDarkMode(darkModeProp);\n    const baseFontSize = useUpdatedBaseFontSize(baseFontSizeOverride);\n    const { Component, as, rest } = useInferredPolymorphic(\n      asProp,\n      props,\n      'span',\n    );\n\n    const hrefHostname = useMemo(() => {\n      if (hasAnchorProps(as, rest)) {\n        const httpRegex = /^http(s)?:\\/\\//;\n        return httpRegex.test(rest.href)\n          ? new URL(rest.href).hostname\n          : currentHostname;\n      }\n    }, [as, rest, currentHostname]);\n\n    let icon;\n\n    const defaultAnchorProps: Pick<\n      JSX.IntrinsicElements['a'],\n      'target' | 'rel'\n    > = {\n      target: undefined,\n      rel: undefined,\n    };\n\n    if (rest.target || rest.rel) {\n      defaultAnchorProps.target = rest.target;\n      defaultAnchorProps.rel = rest.rel;\n    } else if (Component === 'a') {\n      // Sets defaults for target and rel props when Component is an anchor tag\n      if (hrefHostname === currentHostname) {\n        defaultAnchorProps.target = '_self';\n      } else {\n        // Open in new tab\n        defaultAnchorProps.target = '_blank';\n        defaultAnchorProps.rel = 'noopener noreferrer';\n      }\n    }\n\n    if (defaultAnchorProps.target === '_blank' && !hideExternalIcon) {\n      icon = (\n        <OpenNewTabIcon role=\"presentation\" className={openInNewTabStyles} />\n      );\n    } else if (arrowAppearance !== ArrowAppearance.None) {\n      icon = (\n        <ArrowRightIcon\n          role=\"presentation\"\n          size={12}\n          className={cx({\n            [arrowRightIconHover]: arrowAppearance === ArrowAppearance.Hover,\n            [arrowRightIconPersist]:\n              arrowAppearance === ArrowAppearance.Persist,\n          })}\n        />\n      );\n    }\n\n    return (\n      <Component\n        className={cx(\n          anchorClassName,\n          linkStyles,\n          linkScaleStyles(baseFontSize),\n          linkModeStyles[theme],\n          className,\n        )}\n        ref={fwdRef}\n        {...defaultAnchorProps}\n        {...rest}\n      >\n        <span>{children}</span>\n\n        {icon}\n      </Component>\n    );\n  },\n);\n\nexport default Link;\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  Polymorphic,\n  PolymorphicAs,\n  usePolymorphic,\n} from '@leafygreen-ui/polymorphic';\n\nimport { baseTypographyStyles, defaultTextColor } from '../styles';\n\nimport { overlineStyles } from './Overline.styles';\nimport { BaseOverlineProps } from './Overline.types';\n\nexport const Overline = Polymorphic<BaseOverlineProps>(\n  ({\n    darkMode: darkModeProp,\n    className,\n    as = 'div' as PolymorphicAs,\n    ...rest\n  }) => {\n    const { theme } = useDarkMode(darkModeProp);\n    const { Component } = usePolymorphic(as);\n\n    return (\n      <Component\n        className={cx(\n          baseTypographyStyles,\n          overlineStyles,\n          defaultTextColor[theme],\n          className,\n        )}\n        {...rest}\n      />\n    );\n  },\n);\n\nOverline.displayName = 'Overline';\n\nexport default Overline;\n","import { css } from '@leafygreen-ui/emotion';\nimport { fontWeights } from '@leafygreen-ui/tokens';\n\nexport const subtitleStyles = css`\n  font-size: 18px;\n  line-height: 24px;\n  font-weight: ${fontWeights.semiBold};\n`;\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  Polymorphic,\n  PolymorphicAs,\n  usePolymorphic,\n} from '@leafygreen-ui/polymorphic';\n\nimport { baseTypographyStyles, defaultTextColor } from '../styles';\n\nimport { subtitleStyles } from './Subtitle.styles';\nimport { BaseSubtitleProps } from './Subtitle.types';\n\nconst Subtitle = Polymorphic<BaseSubtitleProps>(\n  ({\n    darkMode: darkModeProp,\n    className,\n    as = 'h6' as PolymorphicAs,\n    ...rest\n  }) => {\n    const { theme } = useDarkMode(darkModeProp);\n    const { Component } = usePolymorphic(as);\n\n    return (\n      <Component\n        className={cx(\n          baseTypographyStyles,\n          subtitleStyles,\n          defaultTextColor[theme],\n          className,\n        )}\n        {...rest}\n      />\n    );\n  },\n);\n\nSubtitle.displayName = 'Subtitle';\n\nexport default Subtitle;\n","import React from 'react';\n\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport { getNodeTextContent } from '@leafygreen-ui/lib';\nimport {\n  Polymorph,\n  PolymorphicAs,\n  PolymorphicPropsWithRef,\n} from '@leafygreen-ui/polymorphic';\n\ninterface LocalProps {\n  /**\n   * The maximum future weight of the text. Determines the width of the component.\n   * @default 700\n   */\n  maxFontWeight?: React.CSSProperties['fontWeight'];\n  /**\n   * Defines the pseudo element used to force the element width\n   */\n  pseudoElement?: 'before' | 'after';\n}\n\ntype StaticWidthTextProps<T extends PolymorphicAs> = PolymorphicPropsWithRef<\n  T,\n  LocalProps\n>;\n\nconst staticWidthTextStyle = ({\n  pseudoElement,\n  maxFontWeight,\n}: Pick<StaticWidthTextProps<any>, 'pseudoElement' | 'maxFontWeight'>) => {\n  const pseudoSelector = `&:${pseudoElement}`;\n\n  return css`\n    /* Inherit relevant properties from the parent */\n    font-weight: inherit;\n    font-size: inherit;\n\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n\n    position: relative;\n    display: inline-flex;\n    flex-direction: column;\n    align-items: flex-start;\n    justify-content: center;\n    text-decoration: none;\n    min-width: 0;\n    max-width: 100%;\n\n    ${pseudoSelector} {\n      content: attr(data-text);\n      height: 0;\n      font-weight: ${maxFontWeight};\n      visibility: hidden;\n      overflow: hidden;\n      user-select: none;\n      pointer-events: none;\n    }\n  `;\n};\n\nconst childWrapper = css`\n  flex: 1;\n  min-width: 0;\n  max-width: 100%;\n\n  white-space: inherit;\n  overflow: inherit;\n  text-overflow: inherit;\n`;\n\n/**\n *\n * A wrapper component to ensure that updating the font weight does not affect the width of the element,\n * and prevents layout shift should the font weight change.\n *\n * Useful for showing a bold effect on hover, focus, or active (See `Tabs`, `MenuItem`).\n *\n * Will add an ellipsis if the text would extend beyond the parent,\n * or if the bold text is significantly larger than the regular text\n * (This is rare, and will only occur with _very_ long text)\n *\n * Note: does not support wrapped text (i.e. text within a paragraph)\n *\n * @internal\n *\n */\nexport function StaticWidthText<T extends PolymorphicAs = 'span'>({\n  as,\n  children,\n  maxFontWeight = 700,\n  pseudoElement = 'after',\n  className,\n  ...rest\n}: StaticWidthTextProps<T>) {\n  // calling getNodeTextContent in case a node gets passed in without TS\n  const textContent = getNodeTextContent(children);\n  return (\n    <Polymorph\n      className={cx(\n        staticWidthTextStyle({ pseudoElement, maxFontWeight }),\n        className,\n      )}\n      as={as ?? ('span' as PolymorphicAs)}\n      data-text={textContent}\n      {...rest}\n    >\n      <span className={childWrapper}>{children}</span>\n    </Polymorph>\n  );\n}\n"],"names":["_templateObject","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","baseTypographyStyles","css","_taggedTemplateLiteral","fontFamilies","default","color","light","text","primary","bodyTypeScaleStyles","_defineProperty","BaseFontSize","Body1","typeScales","body1","fontSize","lineHeight","Body2","body2","codeTypeScaleStyles","code1","code2","defaultTextColor","Theme","Light","Dark","dark","useUpdatedBaseFontSize","override","baseFontSize","useBaseFontSize","_excluded","Body","Polymorphic","_ref","baseFontSizeOverride","darkModeProp","darkMode","className","_ref$weight","weight","FontWeight","Regular","_ref$as","as","rest","_objectWithoutProperties","theme","useDarkMode","Component","usePolymorphic","fontWeight","fontWeightTokens","fontWeights","semiBold","React","createElement","_extends","cx","displayName","Body$1","DEFAULT_LGID_ROOT","getLgIds","root","arguments","length","undefined","label","concat","description","getDescriptionStyle","secondary","regular","getDisabledDescriptionColorStyle","disabled","descriptionTypeScaleStyles","Description","asProp","children","dataLgId","_ref$disabled","asDerivedFromChildren","includes","_typeof","Description$1","disclaimerTextColor","disclaimerStyles","Disclaimer","getErrorMessageStyle","error","Error$1","h1Styles","serif","h1Color","palette","green","dark2","gray","light2","H1","H1$1","h2Styles","h2Color","H2","H2$1","h3Styles","medium","H3","_templateObject8","_templateObject9","_templateObject0","H3$1","anchorClassName","createUniqueClassName","code","codeModes","background","border","dark3","light1","dark1","codeFocusModes","focusRing","blue","base","codeLinkStyleModes","codeLinkWrapper","nowrap","normal","InlineCode","InferredPolymorphic","forwardedRef","useInferredPolymorphic","charsCount","_children$match$lengt","_children$match","_children$join$match$","_children$join$match","_text$match$length","_text$match","match","Array","isArray","every","child","join","isValidElement","getNodeTextContent","getChildrenLength","whiteSpace","needsWrapper","renderedInlineCode","ref","cloneElement","InlineCode$1","inlineKeyCodeStyles","inlineKeyCodeColor","white","InlineKeyCode","getLabelStyles","getDisabledLabelColorStyle","labelTypeScaleStyles","Label","Label$1","linkStyles","transitionDuration","linkModeStyles","linkScaleStyles","backLinkBaseStyles","spacing","BackLink$1","fwdRef","ArrowLeftIcon","role","arrowRightIconPersist","arrowRightIconHover","openInNewTabStyles","ArrowAppearance","Link$1","_ref$arrowAppearance","arrowAppearance","_ref$hideExternalIcon","hideExternalIcon","props","_useState2","_slicedToArray","useState","currentHostname","setCurrentHostname","useEffect","window","location","hostname","icon","_useInferredPolymorph","hrefHostname","useMemo","hasAnchorProps","test","href","URL","defaultAnchorProps","target","rel","ArrowRightIcon","size","OpenNewTabIcon","overlineStyles","Overline","Overline$1","subtitleStyles","Subtitle","Subtitle$1","staticWidthTextStyle","pseudoElement","maxFontWeight","pseudoSelector","childWrapper","_ref2","_ref2$maxFontWeight","_ref2$pseudoElement","textContent","Polymorph"],"mappings":"2sCACIA,EAAiBC,EAAkBC,EAAkBC,EAAkBC,EAAkBC,EAAkBC,kzEAIxG,ICJHN,EDIOO,EAAuBC,EAAGA,IAACR,IAAoBA,EAAkBS,EAAuB,CAAC,sCAAuC,eAAgB,SAAUC,EAAAA,aAAaC,QAASC,EAAKA,MAACC,MAAMC,KAAKC,QAAQJ,SACzMK,EAAsBC,EAAgBA,EAAgB,CAAE,EAAEC,EAAYA,aAACC,MAAOX,EAAAA,IAAIP,IAAqBA,EAAmBQ,EAAuB,CAAC,oBAAqB,yBAA0B,aAAcW,aAAWC,MAAMC,SAAUF,aAAWC,MAAME,aAAcL,EAAYA,aAACM,MAAOhB,EAAAA,IAAIN,IAAqBA,EAAmBO,EAAuB,CAAC,oBAAqB,yBAA0B,aAAcW,aAAWK,MAAMH,SAAUF,EAAUA,WAACK,MAAMF,aAC1cG,EAAsBT,EAAgBA,EAAgB,CAAE,EAAEC,EAAYA,aAACC,MAAOX,EAAAA,IAAIL,IAAqBA,EAAmBM,EAAuB,CAAC,oBAAqB,yBAA0B,aAAcW,aAAWO,MAAML,SAAUF,aAAWO,MAAMJ,aAAcL,EAAYA,aAACM,MAAOhB,EAAAA,IAAIJ,IAAqBA,EAAmBK,EAAuB,CAAC,oBAAqB,yBAA0B,aAAcW,EAAAA,WAAWQ,MAAMN,SAAUF,aAAWQ,MAAML,aAC1cM,EAAmBZ,EAAgBA,EAAgB,CAAA,EAAIa,EAAAA,MAAMC,MAAOvB,EAAAA,IAAIH,IAAqBA,EAAmBI,EAAuB,CAAC,gBAAiB,WAAYG,EAAKA,MAACC,MAAMC,KAAKC,QAAQJ,UAAWmB,EAAAA,MAAME,KAAMxB,EAAGA,IAACF,IAAqBA,EAAmBG,EAAuB,CAAC,gBAAiB,WAAYG,EAAKA,MAACqB,KAAKnB,KAAKC,QAAQJ,UES9UuB,EAAyB,SAAgCC,GAClE,IAAIC,EAAeC,EAAAA,kBACnB,OAAIF,EAA8B,KAAbA,EAAkBjB,EAAAA,aAAaM,MAAQN,EAAYA,aAACC,MACjD,KAAjBiB,EAAsBlB,EAAAA,aAAaM,MAAQN,EAAAA,aAAaC,KACjE,EDnBImB,EAAY,CAAC,eAAgB,WAAY,YAAa,SAAU,MAQhEC,EAAOC,EAAAA,YAAY,SAAUC,GAC/B,IAAIC,EAAuBD,EAAKL,aAC9BO,EAAeF,EAAKG,SACpBC,EAAYJ,EAAKI,UACjBC,EAAcL,EAAKM,OACnBA,OAAyB,IAAhBD,EAAyBE,EAAUA,WAACC,QAAUH,EACvDI,EAAUT,EAAKU,GACfA,OAAiB,IAAZD,EAAqB,IAAMA,EAChCE,EAAOC,EAAyBZ,EAAMH,GAEtCgB,EADiBC,EAAWA,YAACZ,GACRW,MACnBlB,EAAeF,EAAuBQ,GAExCc,EADoBC,EAAcA,eAACN,GACPK,UAG1BE,EAAalD,EAAAA,IAAIR,IAAoBA,EAAkBS,EAAuB,CAAC,wBAAyB,qDAAsD,sBAAuBkD,EAAgBC,YAACb,GAASY,EAAAA,YAAiBE,UACpO,OAAoBC,UAAMC,cAAcP,EAAWQ,EAAS,CAC1DnB,UAAWoB,EAAAA,GAAG1D,EAAsBS,EAAoBoB,GAAeP,EAAiByB,GAAQI,EAAYb,IAC3GO,GACL,GACAb,EAAK2B,YAAc,OACnB,IE/BIlE,EAAiBC,EAAkBC,EAAkBC,EF+BzDgE,EAAe5B,EGhCJ6B,EAAoB,gBACpBC,EAAW,WACpB,IAAIC,EAAOC,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAKH,EAM/E,MALU,CACRE,KAAMA,EACNI,MAAO,GAAGC,OAAOL,EAAM,UACvBM,YAAa,GAAGD,OAAOL,EAAM,gBAGjC,EDLWO,EAAsB,SAA6BvB,GAC5D,OAAO9C,EAAGA,IAACR,IAAoBA,EAAkBS,EAAuB,CAAC,gBAAiB,yBAA0B,uBAAwB,sDAAuDG,EAAAA,MAAM0C,GAAOxC,KAAKgE,UAAUnE,QAASD,EAAAA,aAAaC,QAASiD,cAAYmB,QAC5Q,EACWC,EAAmC,SAA0C1B,GACtF,OAAO9C,EAAAA,IAAIP,IAAqBA,EAAmBQ,EAAuB,CAAC,gBAAiB,WAAYG,EAAAA,MAAM0C,GAAOxC,KAAKmE,SAAStE,QACrI,EACWuE,EAA6BjE,EAAgBA,EAAgB,CAAA,EAAIC,EAAAA,aAAaC,MAAOX,EAAAA,IAAIN,IAAqBA,EAAmBO,EAAuB,CAAC,oBAAqB,yBAA0B,aAAcW,EAAUA,WAACC,MAAMC,SAAUF,EAAAA,WAAWC,MAAME,aAAcL,EAAYA,aAACM,MAAOhB,EAAGA,IAACL,IAAqBA,EAAmBM,EAAuB,CAAC,oBAAqB,8FAA+FW,aAAWK,MAAMH,WETpfgB,EAAY,CAAC,KAAM,eAAgB,WAAY,YAAa,WAAY,YAAa,YAQ9E6C,EAAc3C,EAAAA,YAAY,SAAUC,GAC7C,IAAI2C,EAAS3C,EAAKU,GAChBT,EAAuBD,EAAKL,aAC5BiD,EAAW5C,EAAK4C,SAChBxC,EAAYJ,EAAKI,UACjBF,EAAeF,EAAKG,SACpB0C,EAAW7C,EAAK,aAChB8C,EAAgB9C,EAAKwC,SACrBA,OAA6B,IAAlBM,GAAmCA,EAC9CnC,EAAOC,EAAyBZ,EAAMH,GAEtCgB,EADiBC,EAAWA,YAACZ,GACRW,MACnBlB,EAAeF,EAAuBQ,GACtC8C,EAAwB,CAAC,SAAU,UAAUC,SAASC,EAAQL,IAAa,IAAM,MACjFlC,EAAKiC,QAAuCA,EAASI,EAEvDhC,EADoBC,EAAcA,eAACN,GACPK,UAC9B,OAAoBM,UAAMC,cAAcP,EAAWQ,EAAS,CAC1D,YAAaK,EAASiB,GAAUV,YAChC,cAAeP,EAASiB,GAAUV,YAClC/B,UAAWoB,EAAAA,GAAGY,EAAoBvB,GAAQ4B,EAA2B9C,GAAenB,EAAgB,CAAA,EAAI+D,EAAiC1B,GAAQ2B,GAAWpC,IAC3JO,GAAOiC,EACZ,GACAF,EAAYjB,YAAc,cAC1B,IChCIlE,EAAiBC,EAAkBC,ECAnCF,EFgCJ2F,GAAeR,EC5BJS,GAAsB3E,EAAgBA,EAAgB,CAAA,EAAIa,EAAAA,MAAMC,MAAOvB,EAAAA,IAAIR,IAAoBA,EAAkBS,EAAuB,CAAC,gBAAiB,WAAYG,EAAKA,MAACC,MAAMC,KAAKgE,UAAUnE,UAAWmB,EAAAA,MAAME,KAAMxB,EAAGA,IAACP,IAAqBA,EAAmBQ,EAAuB,CAAC,gBAAiB,WAAYG,QAAMqB,KAAKnB,KAAKgE,UAAUnE,UACnVkF,GAAmBrF,EAAGA,IAACN,IAAqBA,EAAmBO,EAAuB,CAAC,gGEL9F6B,GAAY,CAAC,WAAY,WAAY,aAMlC,SAASwD,GAAWrD,GACzB,IAAIE,EAAeF,EAAKG,SACtByC,EAAW5C,EAAK4C,SAChBxC,EAAYJ,EAAKI,UACjBO,EAAOC,EAAyBZ,EAAMH,IAEtCgB,EADiBC,EAAWA,YAACZ,GACRW,MACvB,OAAoBQ,EAAAA,QAAMC,cAAc,QAASC,EAAS,CAAA,EAAIZ,EAAM,CAClEP,UAAWoB,EAAEA,GAAC1D,EAAsBsF,GAAkBD,GAAoBtC,GAAQT,KAChFwC,EACN,CACAS,GAAW5B,YAAc,aDdlB,IEHHlE,GAAiBC,GAAkBC,GFG5B6F,GAAuB,SAA8BtD,GAC9D,IAAIa,EAAQb,EAAKa,MACflB,EAAeK,EAAKL,aAClBd,EAAWc,IAAiBlB,EAAYA,aAACC,MAAQC,EAAAA,WAAWC,MAAMC,SAAWF,EAAAA,WAAWK,MAAMH,SAC9FC,EAAaa,IAAiBlB,eAAaC,MAAQC,EAAAA,WAAWC,MAAME,WAAa,GACrF,OAAOf,MAAIR,IAAoBA,EAAkBS,EAAuB,CAAC,sBAAuB,uBAAwB,6LAA8L,qBAAsB,yBAA0B,aAAcC,EAAYA,aAACC,QAASiD,EAAAA,YAAYmB,QAASnE,EAAKA,MAAC0C,GAAOxC,KAAKkF,MAAMrF,QAASW,EAAUC,EAC5c,EGTIe,GAAY,CAAC,KAAM,WAAY,WAAY,aA0B/C2D,GAnBYzD,EAAAA,YAAY,SAAUC,GAChC,IAAIS,EAAUT,EAAKU,GACjBA,OAAiB,IAAZD,EAAqB,IAAMA,EAChCP,EAAeF,EAAKG,SACpByC,EAAW5C,EAAK4C,SAChBxC,EAAYJ,EAAKI,UACjBO,EAAOC,EAAyBZ,EAAMH,IAEtCgB,EADiBC,EAAWA,YAACZ,GACRW,MACnBlB,EAAeF,IAEjBsB,EADoBC,EAAcA,eAACN,GACPK,UAC9B,OAAoBM,EAAAA,QAAMC,cAAcP,EAAWQ,EAAS,CAAA,EAAIZ,EAAM,CACpEP,UAAWoB,EAAEA,GAAC8B,GAAqB,CACjCzC,MAAOA,EACPlB,aAAcA,IACZS,KACFwC,EACN,GDpBWa,GAAW1F,EAAGA,IAACR,KAAoBA,GAAkBS,EAAuB,CAAC,oBAAqB,+DAAgE,SAAUmD,EAAWA,YAACmB,QAASrE,EAAYA,aAACyF,OAC9MC,GAAUnF,EAAgBA,EAAgB,CAAE,EAAEa,EAAKA,MAACC,MAAOvB,EAAGA,IAACP,KAAqBA,GAAmBQ,EAAuB,CAAC,gBAAiB,WAAY4F,UAAQC,MAAMC,QAASzE,EAAAA,MAAME,KAAMxB,EAAAA,IAAIN,KAAqBA,GAAmBO,EAAuB,CAAC,gBAAiB,WAAY4F,EAAAA,QAAQG,KAAKC,SENpTnE,GAAY,CAAC,WAAY,YAAa,MAOtCoE,GAAKlE,EAAAA,YAAY,SAAUC,GAC7B,IAAIE,EAAeF,EAAKG,SACtBC,EAAYJ,EAAKI,UACjBK,EAAUT,EAAKU,GACfA,OAAiB,IAAZD,EAAqB,KAAOA,EACjCE,EAAOC,EAAyBZ,EAAMH,IAEtCgB,EADiBC,EAAWA,YAACZ,GACRW,MAErBE,EADoBC,EAAcA,eAACN,GACPK,UAC9B,OAAoBM,UAAMC,cAAcP,EAAWQ,EAAS,CAC1DnB,UAAWoB,EAAEA,GAAC1D,EAAsB2F,GAAUE,GAAQ9C,GAAQT,IAC7DO,GACL,GACAsD,GAAGxC,YAAc,KACjB,ICtBIlE,GAAiBC,GAAkBC,GDsBvCyG,GAAeD,GCjBJE,GAAWpG,EAAGA,IAACR,KAAoBA,GAAkBS,EAAuB,CAAC,8DAA+D,qBAAsB,SAAUmD,EAAWA,YAACmB,QAASrE,EAAYA,aAACyF,OAC9MU,GAAU5F,EAAgBA,EAAgB,CAAE,EAAEa,EAAKA,MAACC,MAAOvB,EAAGA,IAACP,KAAqBA,GAAmBQ,EAAuB,CAAC,gBAAiB,WAAY4F,UAAQC,MAAMC,QAASzE,EAAAA,MAAME,KAAMxB,EAAAA,IAAIN,KAAqBA,GAAmBO,EAAuB,CAAC,gBAAiB,WAAY4F,EAAAA,QAAQG,KAAKC,SCNpTnE,GAAY,CAAC,WAAY,YAAa,MAOtCwE,GAAKtE,EAAAA,YAAY,SAAUC,GAC7B,IAAIE,EAAeF,EAAKG,SACtBC,EAAYJ,EAAKI,UACjBK,EAAUT,EAAKU,GACfA,OAAiB,IAAZD,EAAqB,KAAOA,EACjCE,EAAOC,EAAyBZ,EAAMH,IAEtCgB,EADiBC,EAAWA,YAACZ,GACRW,MAErBE,EADoBC,EAAcA,eAACN,GACPK,UAC9B,OAAoBM,UAAMC,cAAcP,EAAWQ,EAAS,CAC1DnB,UAAWoB,EAAEA,GAAC1D,EAAsBqG,GAAUC,GAAQvD,GAAQT,IAC7DO,GACL,GACA0D,GAAG5C,YAAc,KACjB,ICtBIlE,GDsBJ+G,GAAeD,GCnBJE,GAAWxG,EAAGA,IAACR,KAAoBA,GAAkBS,EAAuB,CAAC,8DAA+D,SAAUmD,EAAAA,YAAYqD,QCHzK3E,GAAY,CAAC,WAAY,YAAa,MAOtC4E,GAAK1E,EAAAA,YAAY,SAAUC,GAC7B,IAAIE,EAAeF,EAAKG,SACtBC,EAAYJ,EAAKI,UACjBK,EAAUT,EAAKU,GACfA,OAAiB,IAAZD,EAAqB,KAAOA,EACjCE,EAAOC,EAAyBZ,EAAMH,IAEtCgB,EADiBC,EAAWA,YAACZ,GACRW,MAErBE,EADoBC,EAAcA,eAACN,GACPK,UAC9B,OAAoBM,UAAMC,cAAcP,EAAWQ,EAAS,CAC1DnB,UAAWoB,EAAEA,GAAC1D,EAAsByG,GAAUnF,EAAiByB,GAAQT,IACtEO,GACL,GACA8D,GAAGhD,YAAc,KACjB,ICtBIlE,GAAiBC,GAAkBC,GAAkBC,GAAkBC,GAAkBC,GAAkBC,GAAkB6G,GAAkBC,GAAkBC,GDsBrKC,GAAeJ,GCjBJK,GAAkBC,EAAqBA,wBACvCC,GAAOjH,EAAAA,IAAIR,KAAoBA,GAAkBS,EAAuB,CAAC,qGAAsG,iCAAkC,qDAAsDC,EAAYA,aAAC+G,KAAMF,IAC1RG,GAAYzG,EAAgBA,EAAgB,CAAA,EAAIa,EAAAA,MAAMC,MAAOvB,EAAAA,IAAIP,KAAqBA,GAAmBQ,EAAuB,CAAC,2BAA4B,4BAA6B,iBAAkB,aAAc,6CAA8C,8BAA+B,kBAAmBG,EAAAA,MAAMC,MAAM8G,WAAW7C,UAAUnE,QAASC,EAAAA,MAAMC,MAAM+G,OAAO9C,UAAUnE,QAAS0F,EAAOA,QAACG,KAAKqB,MAAON,GAAiBlB,EAAOA,QAACG,KAAKC,OAAQJ,EAAAA,QAAQG,KAAKsB,SAAUhG,EAAKA,MAACE,KAAMxB,MAAIN,KAAqBA,GAAmBO,EAAuB,CAAC,2BAA4B,4BAA6B,iBAAkB,aAAc,6CAA8C,8BAA+B,kBAAmBG,EAAAA,MAAMqB,KAAK0F,WAAW7C,UAAUnE,QAAS0F,EAAOA,QAACG,KAAKD,MAAOF,EAAAA,QAAQG,KAAKsB,OAAQP,GAAiBlB,EAAOA,QAACG,KAAKD,MAAOF,EAAAA,QAAQG,KAAKuB,QACx2BC,GAAiB/G,EAAgBA,EAAgB,CAAA,EAAIa,EAAKA,MAACC,MAAOvB,EAAAA,IAAIL,KAAqBA,GAAmBM,EAAuB,CAAC,UAAW,2CAA4C,8BAA+B,kBAAmB8G,GAAiBU,YAAUnG,EAAAA,MAAMC,OAAOpB,QAAS0F,UAAQ6B,KAAKC,OAAQrG,EAAAA,MAAME,KAAMxB,MAAIJ,KAAqBA,GAAmBK,EAAuB,CAAC,UAAW,2CAA4C,8BAA+B,kBAAmB8G,GAAiBU,EAASA,UAACnG,QAAME,MAAMrB,QAAS0F,EAAOA,QAAC6B,KAAKC,OAC3iBC,GAAqBnH,EAAgBA,EAAgB,CAAE,EAAEa,EAAKA,MAACC,MAAOvB,EAAGA,IAACH,KAAqBA,GAAmBI,EAAuB,CAAC,gBAAiB,WAAY4F,UAAQ6B,KAAKC,OAAQrG,EAAAA,MAAME,KAAMxB,EAAAA,IAAIF,KAAqBA,GAAmBG,EAAuB,CAAC,gBAAiB,WAAY4F,EAAOA,QAAC6B,KAAKJ,SACtTO,GAAkB7H,EAAAA,IAAI2G,KAAqBA,GAAmB1G,EAAuB,CAAC,8HACtF6H,GAAS9H,EAAAA,IAAI4G,KAAqBA,GAAmB3G,EAAuB,CAAC,iCAC7E8H,GAAS/H,EAAGA,IAAC6G,KAAqBA,GAAmB5G,EAAuB,CAAC,iCCZpF6B,GAAY,CAAC,WAAY,YAAa,WAAY,eAAgB,MASlEkG,GAAaC,EAAmBA,oBAAC,SAAUhG,EAAMiG,GACnD,IAAIrD,EAAW5C,EAAK4C,SAClBxC,EAAYJ,EAAKI,UACjBF,EAAeF,EAAKG,SACpBF,EAAuBD,EAAKL,aAC5Be,EAAKV,EAAKU,GACVC,EAAOC,EAAyBZ,EAAMH,IAEtCgB,EADiBC,EAAWA,YAACZ,GACRW,MACnBlB,EAAeF,EAAuBQ,GAExCc,EAD0BmF,EAAsBA,uBAACxF,EAAIC,EAAM,QACzBI,UAChCoF,ECpByB,SAA2BvD,GAEtD,IAAIwD,EAAuBC,EAKvBC,EAAuBC,EAGvBC,EAAoBC,EAT1B,MAAwB,iBAAb7D,EAE2S,QAA5SwD,EAAkO,QAAzMC,EAAkBzD,EAAS8D,MAAM,0KAAoM,IAApBL,OAA6B,EAASA,EAAgBtE,cAA8C,IAA1BqE,EAAmCA,EAAwB,EAC9WO,MAAMC,QAAQhE,IAAaA,EAASiE,MAAM,SAAUC,GAC7D,MAAwB,iBAAVA,CAClB,GAEgV,QAApUR,EAAgP,QAAvNC,EAAuB3D,EAASmE,KAAK,IAAIL,MAAM,0KAAyM,IAAzBH,OAAkC,EAASA,EAAqBxE,cAA8C,IAA1BuE,EAAmCA,EAAwB,EACzXU,EAAAA,eAAepE,IAG4P,QAAzR4D,EAAuN,QAAjMC,EADnBQ,qBAAmBrE,GACmB8D,MAAM,0KAAgM,IAAhBD,OAAyB,EAASA,EAAY1E,cAA2C,IAAvByE,EAAgCA,EAEpU,CACT,CDKmBU,CAAkBtE,GAC/BuE,EAAahB,GAAc,GAAKN,GAASC,GACzCsB,EAA6B,SAAdrG,EACfsG,EAAkChG,EAAAA,QAAMC,cAAc,OAAQ,CAChEgG,IAAKrB,EACL7F,UAAWoB,EAAAA,GAAGvC,EAAoBU,GAAeqF,GAAMC,GAAUpE,GAAQ0E,GAAe1E,GAAQsG,EAAY3I,EAAgB,GAAImH,GAAmB9E,GAAQuG,GAAehH,IACzKwC,GACH,OAAIwE,EACkB/F,UAAMC,cAAcP,EAAWQ,EAAS,CAC1DnB,UAAWoB,EAAEA,GAACsD,GAAiBc,GAAiBxF,IAC/CO,GAAO0G,GAEQhG,UAAMkG,aAAaF,EAAoB1G,EAC7D,GACAoF,GAAWtE,YAAc,aACzB,IEpCIlE,GAAiBC,GAAkBC,GCAnCF,GAAiBC,GAAkBC,GAAkBC,GHoCzD8J,GAAezB,GE/BJ0B,GAAsB1J,EAAGA,IAACR,KAAoBA,GAAkBS,EAAuB,CAAC,oBAAqB,mGAAoGC,EAAYA,aAAC+G,MAC9N0C,GAAqBlJ,EAAgBA,EAAgB,CAAA,EAAIa,EAAAA,MAAMC,MAAOvB,EAAGA,IAACP,KAAqBA,GAAmBQ,EAAuB,CAAC,gBAAiB,wBAAyB,4BAA6B,WAAYG,EAAAA,MAAMC,MAAMC,KAAKC,QAAQJ,QAAS0F,EAAAA,QAAQG,KAAKqB,MAAOxB,EAAOA,QAAC+D,QAAStI,EAAKA,MAACE,KAAMxB,EAAAA,IAAIN,KAAqBA,GAAmBO,EAAuB,CAAC,gBAAiB,wBAAyB,4BAA6B,WAAYG,EAAAA,MAAMqB,KAAKnB,KAAKC,QAAQJ,QAAS0F,EAAAA,QAAQG,KAAK2B,KAAM9B,EAAAA,QAAQG,KAAKqB,QEN/gBvF,GAAY,CAAC,eAAgB,WAAY,WAAY,aAOzD,SAAS+H,GAAc5H,GACrB,IAAIC,EAAuBD,EAAKL,aAC9BO,EAAeF,EAAKG,SACpByC,EAAW5C,EAAK4C,SAChBxC,EAAYJ,EAAKI,UACjBO,EAAOC,EAAyBZ,EAAMH,IACpCF,EAAeF,EAAuBQ,GAExCY,EADiBC,EAAWA,YAACZ,GACRW,MACvB,OAAoBQ,UAAMC,cAAc,OAAQC,EAAS,CACvDnB,UAAWoB,EAAAA,GAAGiG,GAAqBC,GAAmB7G,GAAQ5B,EAAoBU,GAAeS,IAChGO,GAAOiC,EACZ,CACAgF,GAAcnG,YAAc,gBDjBrB,IAAIoG,GAAiB,SAAwBhH,GAClD,OAAO9C,EAAGA,IAACR,KAAoBA,GAAkBS,EAAuB,CAAC,gBAAiB,yBAA0B,uBAAwB,WAAYG,EAAAA,MAAM0C,GAAOxC,KAAKC,QAAQJ,QAASD,EAAAA,aAAaC,QAASiD,cAAYC,SAC/N,EACW0G,GAA6B,SAAoCjH,GAC1E,OAAO9C,EAAAA,IAAIP,KAAqBA,GAAmBQ,EAAuB,CAAC,gBAAiB,WAAYG,EAAAA,MAAM0C,GAAOxC,KAAKmE,SAAStE,QACrI,EACW6J,GAAuBvJ,EAAgBA,EAAgB,CAAA,EAAIC,EAAAA,aAAaC,MAAOX,EAAAA,IAAIN,KAAqBA,GAAmBO,EAAuB,CAAC,oBAAqB,yBAA0B,aAAcW,EAAAA,WAAWC,MAAMC,SAAUF,EAAUA,WAACC,MAAME,aAAcL,EAAAA,aAAaM,MAAOhB,EAAAA,IAAIL,KAAqBA,GAAmBM,EAAuB,CAAC,oBAAqB,8FAA+FW,EAAUA,WAACK,MAAMH,WET9egB,GAAY,CAAC,eAAgB,WAAY,YAAa,WAAY,WAAY,KAAM,aAQ7EmI,GAAQjI,EAAAA,YAAY,SAAUC,GACvC,IAAIC,EAAuBD,EAAKL,aAC9BO,EAAeF,EAAKG,SACpBC,EAAYJ,EAAKI,UACjBwC,EAAW5C,EAAK4C,SAChBE,EAAgB9C,EAAKwC,SACrBA,OAA6B,IAAlBM,GAAmCA,EAC9CrC,EAAUT,EAAKU,GACfA,OAAiB,IAAZD,EAAqB,QAAUA,EACpCoC,EAAW7C,EAAK,aAChBW,EAAOC,EAAyBZ,EAAMH,IAEtCgB,EADiBC,EAAWA,YAACZ,GACRW,MACnBlB,EAAeF,EAAuBQ,GAExCc,EADoBC,EAAcA,eAACN,GACPK,UAC9B,OAAoBM,UAAMC,cAAcP,EAAWQ,EAAS,CAC1D,YAAaK,EAASiB,GAAUZ,MAChC,cAAeL,EAASiB,GAAUZ,MAClC7B,UAAWoB,EAAAA,GAAGqG,GAAehH,GAAQkH,GAAqBpI,GAAenB,EAAgB,CAAA,EAAIsJ,GAA2BjH,GAAQ2B,GAAWpC,IAC1IO,GAAOiC,EACZ,GACAoF,GAAMvG,YAAc,QACpB,IC/BIlE,GAAiBC,GAAkBC,GCAnCF,GCAAA,GAAiBC,GAAkBC,GCAnCF,GJ+BJ0K,GAAeD,GCzBJlD,GAAkBC,EAAAA,wBAClBmD,GAAanK,EAAAA,IAAIR,KAAoBA,GAAkBS,EAAuB,CAAC,oBAAqB,uZAAwZ,0IAA2IC,EAAAA,aAAaC,QAASiK,EAAAA,mBAAmBjK,SAChrBkK,GAAiB5J,EAAgBA,EAAgB,CAAA,EAAIa,EAAAA,MAAMC,MAAOvB,EAAGA,IAACP,KAAqBA,GAAmBQ,EAAuB,CAAC,gBAAiB,uBAAwB,+EAAgF,8FAA+F,kBAAmB4F,EAAAA,QAAQ6B,KAAKC,KAAMvE,EAAWA,YAACmB,QAASsB,EAAOA,QAACG,KAAKC,OAAQJ,EAAAA,QAAQ6B,KAAKC,OAAQrG,EAAAA,MAAME,KAAMxB,EAAGA,IAACN,KAAqBA,GAAmBO,EAAuB,CAAC,gBAAiB,uBAAwB,+EAAgF,8FAA+F,kBAAmB4F,EAAAA,QAAQ6B,KAAKJ,OAAQlE,EAAWA,YAACC,SAAUwC,UAAQG,KAAKD,MAAOF,EAAAA,QAAQ6B,KAAKC,OAC10B2C,GAAkB,SAAyB1I,GACpD,GAAIA,EACF,OAAOpB,EAAoBoB,EAE/B,ECVW2I,GAAqBvK,EAAGA,IAACR,KAAoBA,GAAkBS,EAAuB,CAAC,YAAa,oCAAqCuK,EAAOA,QAAC,MGHxJ1I,GAAY,CAAC,WAAY,YAAa,eAAgB,WAAY,MA4BtE2I,GAnBexC,EAAmBA,oBAAC,SAAUhG,EAAMyI,GACjD,IAAI7F,EAAW5C,EAAK4C,SAClBxC,EAAYJ,EAAKI,UACjBH,EAAuBD,EAAKL,aAC5BO,EAAeF,EAAKG,SACpBO,EAAKV,EAAKU,GACVC,EAAOC,EAAyBZ,EAAMH,IAEtCgB,EADiBC,EAAWA,YAACZ,GACRW,MACnBlB,EAAeF,EAAuBQ,GAExCc,EAD0BmF,EAAsBA,uBAACxF,EAAIC,EAAM,QACzBI,UACpC,OAAoBM,UAAMC,cAAcP,EAAWQ,EAAS,CAC1DnB,UAAWoB,EAAEA,GAACsD,GAAiBoD,GAAYG,GAAgB1I,GAAeyI,GAAevH,GAAQyH,GAAoBlI,GACrHkH,IAAKmB,GACJ9H,GAAoBU,UAAMC,cAAcoH,EAAAA,QAAe,CACxDC,KAAM,iBACJ/F,EACN,GFxBWgG,GAAwB7K,EAAAA,IAAIR,KAAoBA,GAAkBS,EAAuB,CAAC,mFAC1F6K,GAAsB9K,EAAAA,IAAIP,KAAqBA,GAAmBQ,EAAuB,CAAC,8KAA+K,cAAe,6FAA8F8G,GAAiBA,IACvYgE,GAAqB/K,EAAGA,IAACN,KAAqBA,GAAmBO,EAAuB,CAAC,gFGNhG+K,GACK,QADLA,GAEO,UAFPA,GAGI,OCFJlJ,GAAY,CAAC,WAAY,YAAa,kBAAmB,mBAAoB,eAAgB,WAAY,MA6E7GmJ,GAlEWhD,EAAmBA,oBAAC,SAAUhG,EAAMyI,GAC7C,IAAI7F,EAAW5C,EAAK4C,SAClBxC,EAAYJ,EAAKI,UACjB6I,EAAuBjJ,EAAKkJ,gBAC5BA,OAA2C,IAAzBD,EAAkCF,GAAuBE,EAC3EE,EAAwBnJ,EAAKoJ,iBAC7BA,OAA6C,IAA1BD,GAA2CA,EAC9DlJ,EAAuBD,EAAKL,aAC5BO,EAAeF,EAAKG,SACpBwC,EAAS3C,EAAKU,GACd2I,EAAQzI,EAAyBZ,EAAMH,IAEvCyJ,EAAaC,EADCC,EAAQA,SAAC,IACgB,GACvCC,EAAkBH,EAAW,GAC7BI,EAAqBJ,EAAW,GAClCK,EAAAA,UAAU,WACRD,EAAmBE,OAAOC,SAASC,SACpC,EAAE,IACH,IAaIC,EAZFlJ,EADiBC,EAAWA,YAACZ,GACRW,MACnBlB,EAAeF,EAAuBQ,GACtC+J,EAAwB9D,EAAsBA,uBAACvD,EAAQ0G,EAAO,QAChEtI,EAAYiJ,EAAsBjJ,UAClCL,EAAKsJ,EAAsBtJ,GAC3BC,EAAOqJ,EAAsBrJ,KAC3BsJ,EAAeC,EAAAA,QAAQ,WACzB,GAAIC,EAAcA,eAACzJ,EAAIC,GAAO,CAE5B,MADgB,iBACCyJ,KAAKzJ,EAAK0J,MAAQ,IAAIC,IAAI3J,EAAK0J,MAAMP,SAAWL,CAClE,CACF,EAAE,CAAC/I,EAAIC,EAAM8I,IAEVc,EAAqB,CACvBC,YAAQxI,EACRyI,SAAKzI,GA2BP,OAzBIrB,EAAK6J,QAAU7J,EAAK8J,KACtBF,EAAmBC,OAAS7J,EAAK6J,OACjCD,EAAmBE,IAAM9J,EAAK8J,KACP,MAAd1J,IAELkJ,IAAiBR,EACnBc,EAAmBC,OAAS,SAG5BD,EAAmBC,OAAS,SAC5BD,EAAmBE,IAAM,wBAGK,WAA9BF,EAAmBC,QAAwBpB,EAKpCF,IAAoBH,KAC7BgB,EAAoB1I,EAAAA,QAAMC,cAAcoJ,UAAgB,CACtD/B,KAAM,eACNgC,KAAM,GACNvK,UAAWoB,EAAAA,GAAGhD,EAAgBA,EAAgB,CAAA,EAAIqK,GAAqBK,IAAoBH,IAAwBH,GAAuBM,IAAoBH,QARhKgB,EAAoB1I,EAAAA,QAAMC,cAAcsJ,UAAgB,CACtDjC,KAAM,eACNvI,UAAW0I,KASKzH,UAAMC,cAAcP,EAAWQ,EAAS,CAC1DnB,UAAWoB,EAAAA,GAAGsD,GAAiBoD,GAAYG,GAAgB1I,GAAeyI,GAAevH,GAAQT,GACjGkH,IAAKmB,GACJ8B,EAAoB5J,GAAoBU,UAAMC,cAAc,OAAQ,KAAMsB,GAAWmH,EAC1F,GHzEWc,GAAiB9M,EAAGA,IAACR,KAAoBA,GAAkBS,EAAuB,CAAC,wCAAyC,uFAAwFmD,EAAAA,YAAYC,UIHvOvB,GAAY,CAAC,WAAY,YAAa,MAO/BiL,GAAW/K,EAAAA,YAAY,SAAUC,GAC1C,IAAIE,EAAeF,EAAKG,SACtBC,EAAYJ,EAAKI,UACjBK,EAAUT,EAAKU,GACfA,OAAiB,IAAZD,EAAqB,MAAQA,EAClCE,EAAOC,EAAyBZ,EAAMH,IAEtCgB,EADiBC,EAAWA,YAACZ,GACRW,MAErBE,EADoBC,EAAcA,eAACN,GACPK,UAC9B,OAAoBM,UAAMC,cAAcP,EAAWQ,EAAS,CAC1DnB,UAAWoB,EAAEA,GAAC1D,EAAsB+M,GAAgBzL,EAAiByB,GAAQT,IAC5EO,GACL,GACAmK,GAASrJ,YAAc,WACvB,ICtBIlE,GDsBJwN,GAAeD,GCnBJE,GAAiBjN,EAAGA,IAACR,KAAoBA,GAAkBS,EAAuB,CAAC,8DAA+D,SAAUmD,EAAAA,YAAYC,UCH/KvB,GAAY,CAAC,WAAY,YAAa,MAOtCoL,GAAWlL,EAAAA,YAAY,SAAUC,GACnC,IAAIE,EAAeF,EAAKG,SACtBC,EAAYJ,EAAKI,UACjBK,EAAUT,EAAKU,GACfA,OAAiB,IAAZD,EAAqB,KAAOA,EACjCE,EAAOC,EAAyBZ,EAAMH,IAEtCgB,EADiBC,EAAWA,YAACZ,GACRW,MAErBE,EADoBC,EAAcA,eAACN,GACPK,UAC9B,OAAoBM,UAAMC,cAAcP,EAAWQ,EAAS,CAC1DnB,UAAWoB,EAAEA,GAAC1D,EAAsBkN,GAAgB5L,EAAiByB,GAAQT,IAC5EO,GACL,GACAsK,GAASxJ,YAAc,WACvB,ICrBIlE,GAAiBC,GDqBrB0N,GAAeD,GCtBXpL,GAAY,CAAC,KAAM,WAAY,gBAAiB,gBAAiB,aAMjEsL,GAAuB,SAA8BnL,GACvD,IAAIoL,EAAgBpL,EAAKoL,cACvBC,EAAgBrL,EAAKqL,cACnBC,EAAiB,KAAKpJ,OAAOkJ,GACjC,OAAOrN,MAAIR,KAAoBA,GAAkBS,EAAuB,CAAC,2ZAA4Z,6EAA8E,6HAA8HsN,EAAgBD,EACnsB,EACIE,GAAexN,EAAAA,IAAIP,KAAqBA,GAAmBQ,EAAuB,CAAC,+UAkBhF,SAAyBwN,GAC9B,IAAI9K,EAAK8K,EAAM9K,GACbkC,EAAW4I,EAAM5I,SACjB6I,EAAsBD,EAAMH,cAC5BA,OAAwC,IAAxBI,EAAiC,IAAMA,EACvDC,EAAsBF,EAAMJ,cAC5BA,OAAwC,IAAxBM,EAAiC,QAAUA,EAC3DtL,EAAYoL,EAAMpL,UAClBO,EAAOC,EAAyB4K,EAAO3L,IAErC8L,EAAc1E,qBAAmBrE,GACrC,OAAoBvB,UAAMC,cAAcsK,EAASA,UAAErK,EAAS,CAC1DnB,UAAWoB,EAAEA,GAAC2J,GAAqB,CACjCC,cAAeA,EACfC,cAAeA,IACbjL,GACJM,GAAIA,QAA+BA,EAAK,OACxC,YAAaiL,GACZhL,GAAoBU,UAAMC,cAAc,OAAQ,CACjDlB,UAAWmL,IACV3I,GACL"}